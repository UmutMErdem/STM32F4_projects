
uart_bootlader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f88  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800414c  0800414c  0000514c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004214  08004214  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004214  08004214  00005214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800421c  0800421c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800421c  0800421c  0000521c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004220  08004220  00005220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004224  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000000c  08004230  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08004230  0000629c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8df  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9f  00000000  00000000  0001091b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  000127c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006fc  00000000  00000000  000130e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002140d  00000000  00000000  000137dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb82  00000000  00000000  00034be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8dde  00000000  00000000  0004076b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002494  00000000  00000000  0010958c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0010ba20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004134 	.word	0x08004134

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004134 	.word	0x08004134

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b0b2      	sub	sp, #200	@ 0xc8
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f001 f87b 	bl	8001630 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f8ff 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f993 	bl	8000868 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000542:	f000 f967 	bl	8000814 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Bootloader başlatma
  Bootloader_Init();
 8000546:	f000 f9d1 	bl	80008ec <Bootloader_Init>

  // LED'i yak (bootloader çalışıyor göstergesi)
  HAL_GPIO_WritePin(LED_CNTRL_GPIO_Port, LED_CNTRL_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2120      	movs	r1, #32
 800054e:	4871      	ldr	r0, [pc, #452]	@ (8000714 <main+0x1e4>)
 8000550:	f001 ff56 	bl	8002400 <HAL_GPIO_WritePin>

  // Basit test mesajı gönder
  uint8_t msg[] = "STM32F446 Bootloader Ready (10s timeout)\r\n";
 8000554:	4b70      	ldr	r3, [pc, #448]	@ (8000718 <main+0x1e8>)
 8000556:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 800055a:	461d      	mov	r5, r3
 800055c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000568:	c403      	stmia	r4!, {r0, r1}
 800056a:	8022      	strh	r2, [r4, #0]
 800056c:	3402      	adds	r4, #2
 800056e:	0c13      	lsrs	r3, r2, #16
 8000570:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, msg, sizeof(msg)-1, 1000);
 8000572:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800057a:	222a      	movs	r2, #42	@ 0x2a
 800057c:	4867      	ldr	r0, [pc, #412]	@ (800071c <main+0x1ec>)
 800057e:	f002 fd91 	bl	80030a4 <HAL_UART_Transmit>
  
  // Bootloader timeout ayarları
  uint32_t bootloader_start_time = HAL_GetTick();
 8000582:	f001 f8f1 	bl	8001768 <HAL_GetTick>
 8000586:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t led_last_toggle = HAL_GetTick();
 800058a:	f001 f8ed 	bl	8001768 <HAL_GetTick>
 800058e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
  uint8_t led_state = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint32_t current_time = HAL_GetTick();
 8000598:	f001 f8e6 	bl	8001768 <HAL_GetTick>
 800059c:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
    
    // LED blink (bootloader aktif göstergesi - her 200ms)
    if ((current_time - led_last_toggle) > 200)
 80005a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80005a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80005ac:	d918      	bls.n	80005e0 <main+0xb0>
    {
      led_state = !led_state;
 80005ae:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bf0c      	ite	eq
 80005b6:	2301      	moveq	r3, #1
 80005b8:	2300      	movne	r3, #0
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
      HAL_GPIO_WritePin(LED_CNTRL_GPIO_Port, LED_CNTRL_Pin, led_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005c0:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	bf14      	ite	ne
 80005c8:	2301      	movne	r3, #1
 80005ca:	2300      	moveq	r3, #0
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	2120      	movs	r1, #32
 80005d2:	4850      	ldr	r0, [pc, #320]	@ (8000714 <main+0x1e4>)
 80005d4:	f001 ff14 	bl	8002400 <HAL_GPIO_WritePin>
      led_last_toggle = current_time;
 80005d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80005dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    }
    
    // Timeout kontrolü
    if ((current_time - bootloader_start_time) > BOOTLOADER_TIMEOUT_MS)
 80005e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80005e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d967      	bls.n	80006c2 <main+0x192>
    {
      // Timeout mesajı
      uint8_t timeout_msg[] = "Bootloader timeout, checking for application...\r\n";
 80005f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000720 <main+0x1f0>)
 80005f4:	463c      	mov	r4, r7
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000604:	682b      	ldr	r3, [r5, #0]
 8000606:	8023      	strh	r3, [r4, #0]
      HAL_UART_Transmit(&huart2, timeout_msg, sizeof(timeout_msg)-1, 1000);
 8000608:	4639      	mov	r1, r7
 800060a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800060e:	2231      	movs	r2, #49	@ 0x31
 8000610:	4842      	ldr	r0, [pc, #264]	@ (800071c <main+0x1ec>)
 8000612:	f002 fd47 	bl	80030a4 <HAL_UART_Transmit>
      
      // Application'da geçerli kod var mı kontrol et
      uint32_t app_stack_ptr = *(volatile uint32_t*)APPLICATION_START_ADDRESS;
 8000616:	4b43      	ldr	r3, [pc, #268]	@ (8000724 <main+0x1f4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      uint32_t app_reset_handler = *(volatile uint32_t*)(APPLICATION_START_ADDRESS + 4);
 800061e:	4b42      	ldr	r3, [pc, #264]	@ (8000728 <main+0x1f8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      
      // Application validation
      if (app_stack_ptr >= 0x20000000 && app_stack_ptr <= 0x20040000 &&
 8000626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800062a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800062e:	d330      	bcc.n	8000692 <main+0x162>
 8000630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000634:	4a3d      	ldr	r2, [pc, #244]	@ (800072c <main+0x1fc>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d82b      	bhi.n	8000692 <main+0x162>
 800063a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800063e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000642:	d026      	beq.n	8000692 <main+0x162>
          app_reset_handler != 0xFFFFFFFF &&
 8000644:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000648:	4a36      	ldr	r2, [pc, #216]	@ (8000724 <main+0x1f4>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d321      	bcc.n	8000692 <main+0x162>
          app_reset_handler >= APPLICATION_START_ADDRESS &&
 800064e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000652:	4a37      	ldr	r2, [pc, #220]	@ (8000730 <main+0x200>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d81c      	bhi.n	8000692 <main+0x162>
          app_reset_handler < 0x08080000)
      {
        // LED'i söndür
        HAL_GPIO_WritePin(LED_CNTRL_GPIO_Port, LED_CNTRL_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2120      	movs	r1, #32
 800065c:	482d      	ldr	r0, [pc, #180]	@ (8000714 <main+0x1e4>)
 800065e:	f001 fecf 	bl	8002400 <HAL_GPIO_WritePin>
        
        uint8_t jump_msg[] = "Jumping to application...\r\n";
 8000662:	4b34      	ldr	r3, [pc, #208]	@ (8000734 <main+0x204>)
 8000664:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8000668:	461d      	mov	r5, r3
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        HAL_UART_Transmit(&huart2, jump_msg, sizeof(jump_msg)-1, 1000);
 8000676:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800067a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800067e:	221b      	movs	r2, #27
 8000680:	4826      	ldr	r0, [pc, #152]	@ (800071c <main+0x1ec>)
 8000682:	f002 fd0f 	bl	80030a4 <HAL_UART_Transmit>
        HAL_Delay(100);
 8000686:	2064      	movs	r0, #100	@ 0x64
 8000688:	f001 f87a 	bl	8001780 <HAL_Delay>
        
        // Application'a atla
        Bootloader_JumpToApplication();
 800068c:	f000 fc3c 	bl	8000f08 <Bootloader_JumpToApplication>
      {
 8000690:	e017      	b.n	80006c2 <main+0x192>
      }
      else
      {
        uint8_t no_app_msg[] = "No valid application found, staying in bootloader\r\n";
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <main+0x208>)
 8000694:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000698:	461d      	mov	r5, r3
 800069a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a6:	682b      	ldr	r3, [r5, #0]
 80006a8:	6023      	str	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, no_app_msg, sizeof(no_app_msg)-1, 1000);
 80006aa:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80006ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b2:	2233      	movs	r2, #51	@ 0x33
 80006b4:	4819      	ldr	r0, [pc, #100]	@ (800071c <main+0x1ec>)
 80006b6:	f002 fcf5 	bl	80030a4 <HAL_UART_Transmit>
        
        // Timer'ı reset et, bootloader'da kal
        bootloader_start_time = current_time;
 80006ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80006be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      }
    }
    
    // UART komut kontrolü
    if (Bootloader_CheckForUpdate())
 80006c2:	f000 f92f 	bl	8000924 <Bootloader_CheckForUpdate>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d019      	beq.n	8000700 <main+0x1d0>
    {
      // Aktivite algılandı, timer'ı reset et
      bootloader_start_time = current_time;
 80006cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80006d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      
      // LED'i açık tut (aktivite göstergesi)
      HAL_GPIO_WritePin(LED_CNTRL_GPIO_Port, LED_CNTRL_Pin, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2120      	movs	r1, #32
 80006d8:	480e      	ldr	r0, [pc, #56]	@ (8000714 <main+0x1e4>)
 80006da:	f001 fe91 	bl	8002400 <HAL_GPIO_WritePin>
      led_state = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
      led_last_toggle = current_time;
 80006e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80006e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
      
      uint8_t should_continue = Bootloader_Main();
 80006ec:	f000 f95e 	bl	80009ac <Bootloader_Main>
 80006f0:	4603      	mov	r3, r0
 80006f2:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
      
      if (should_continue == 0) {
 80006f6:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d100      	bne.n	8000700 <main+0x1d0>
        break; // Jump komutu geldi, çık
 80006fe:	e003      	b.n	8000708 <main+0x1d8>
      }
    }

    // Kısa bekle
    HAL_Delay(10);
 8000700:	200a      	movs	r0, #10
 8000702:	f001 f83d 	bl	8001780 <HAL_Delay>
  {
 8000706:	e747      	b.n	8000598 <main+0x68>
  }
  
  // Bootloader sonlandı, application çalışıyor
  while(1) {
    // Boş loop - asla buraya ulaşılmamalı
    HAL_Delay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070c:	f001 f838 	bl	8001780 <HAL_Delay>
 8000710:	e7fa      	b.n	8000708 <main+0x1d8>
 8000712:	bf00      	nop
 8000714:	40020000 	.word	0x40020000
 8000718:	0800414c 	.word	0x0800414c
 800071c:	20000028 	.word	0x20000028
 8000720:	08004178 	.word	0x08004178
 8000724:	08008000 	.word	0x08008000
 8000728:	08008004 	.word	0x08008004
 800072c:	20040000 	.word	0x20040000
 8000730:	0807ffff 	.word	0x0807ffff
 8000734:	080041ac 	.word	0x080041ac
 8000738:	080041c8 	.word	0x080041c8

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	@ 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2234      	movs	r2, #52	@ 0x34
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f003 fcc6 	bl	80040dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b29      	ldr	r3, [pc, #164]	@ (800080c <SystemClock_Config+0xd0>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	4a28      	ldr	r2, [pc, #160]	@ (800080c <SystemClock_Config+0xd0>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000770:	4b26      	ldr	r3, [pc, #152]	@ (800080c <SystemClock_Config+0xd0>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <SystemClock_Config+0xd4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000788:	4a21      	ldr	r2, [pc, #132]	@ (8000810 <SystemClock_Config+0xd4>)
 800078a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <SystemClock_Config+0xd4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079c:	2301      	movs	r3, #1
 800079e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b0:	2304      	movs	r3, #4
 80007b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007b4:	2354      	movs	r3, #84	@ 0x54
 80007b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 f97d 	bl	8002ac8 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007d4:	f000 fe38 	bl	8001448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2302      	movs	r3, #2
 80007de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2102      	movs	r1, #2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fe1d 	bl	8002434 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000800:	f000 fe22 	bl	8001448 <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3750      	adds	r7, #80	@ 0x50
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000818:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_USART2_UART_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	@ (8000864 <MX_USART2_UART_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081e:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <MX_USART2_UART_Init+0x4c>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_USART2_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_USART2_UART_Init+0x4c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_USART2_UART_Init+0x4c>)
 800084c:	f002 fbda 	bl	8003004 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000856:	f000 fdf7 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000028 	.word	0x20000028
 8000864:	40004400 	.word	0x40004400

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <MX_GPIO_Init+0x7c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a17      	ldr	r2, [pc, #92]	@ (80008e4 <MX_GPIO_Init+0x7c>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <MX_GPIO_Init+0x7c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_GPIO_Init+0x7c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <MX_GPIO_Init+0x7c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_GPIO_Init+0x7c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CNTRL_GPIO_Port, LED_CNTRL_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	480b      	ldr	r0, [pc, #44]	@ (80008e8 <MX_GPIO_Init+0x80>)
 80008bc:	f001 fda0 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_CNTRL_Pin */
  GPIO_InitStruct.Pin = LED_CNTRL_Pin;
 80008c0:	2320      	movs	r3, #32
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_CNTRL_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_GPIO_Init+0x80>)
 80008d8:	f001 fbfe 	bl	80020d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020000 	.word	0x40020000

080008ec <Bootloader_Init>:
/* USER CODE BEGIN 4 */
/**
 * @brief Bootloader initialization
 */
void Bootloader_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  // Circular buffer'ı sıfırla
  uart_rx_buffer.head = 0;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <Bootloader_Init+0x2c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
  uart_rx_buffer.tail = 0;
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <Bootloader_Init+0x2c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
  uart_rx_buffer.count = 0;
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <Bootloader_Init+0x2c>)
 8000902:	2200      	movs	r2, #0
 8000904:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

  // UART interrupt reception başlat
  HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8000908:	2201      	movs	r2, #1
 800090a:	4904      	ldr	r1, [pc, #16]	@ (800091c <Bootloader_Init+0x30>)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <Bootloader_Init+0x34>)
 800090e:	f002 fc54 	bl	80031ba <HAL_UART_Receive_IT>
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000070 	.word	0x20000070
 800091c:	20000276 	.word	0x20000276
 8000920:	20000028 	.word	0x20000028

08000924 <Bootloader_CheckForUpdate>:

/**
 * @brief Check for incoming UART data
 */
uint8_t Bootloader_CheckForUpdate(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  return Buffer_Available(&uart_rx_buffer) > 0;
 8000928:	4805      	ldr	r0, [pc, #20]	@ (8000940 <Bootloader_CheckForUpdate+0x1c>)
 800092a:	f000 fd5f 	bl	80013ec <Buffer_Available>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	bf14      	ite	ne
 8000934:	2301      	movne	r3, #1
 8000936:	2300      	moveq	r3, #0
 8000938:	b2db      	uxtb	r3, r3
}
 800093a:	4618      	mov	r0, r3
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000070 	.word	0x20000070

08000944 <Buffer_ReadBytes>:

/**
 * @brief Buffer'dan belirtilen sayıda byte oku (Little Endian)
 */
uint8_t Buffer_ReadBytes(uint8_t *data, uint32_t size, uint32_t timeout_ms)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  uint32_t start_time = HAL_GetTick();
 8000950:	f000 ff0a 	bl	8001768 <HAL_GetTick>
 8000954:	6138      	str	r0, [r7, #16]
  uint32_t bytes_read = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]

  while (bytes_read < size) {
 800095a:	e01c      	b.n	8000996 <Buffer_ReadBytes+0x52>
    if (Buffer_Available(&uart_rx_buffer) > 0) {
 800095c:	4812      	ldr	r0, [pc, #72]	@ (80009a8 <Buffer_ReadBytes+0x64>)
 800095e:	f000 fd45 	bl	80013ec <Buffer_Available>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d009      	beq.n	800097c <Buffer_ReadBytes+0x38>
      Buffer_Get(&uart_rx_buffer, &data[bytes_read]);
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	4413      	add	r3, r2
 800096e:	4619      	mov	r1, r3
 8000970:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <Buffer_ReadBytes+0x64>)
 8000972:	f000 fd09 	bl	8001388 <Buffer_Get>
      bytes_read++;
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
    }

    // Timeout kontrolü
    if ((HAL_GetTick() - start_time) > timeout_ms) {
 800097c:	f000 fef4 	bl	8001768 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	429a      	cmp	r2, r3
 800098a:	d201      	bcs.n	8000990 <Buffer_ReadBytes+0x4c>
      return 0; // Timeout
 800098c:	2300      	movs	r3, #0
 800098e:	e007      	b.n	80009a0 <Buffer_ReadBytes+0x5c>
    }

    HAL_Delay(1);
 8000990:	2001      	movs	r0, #1
 8000992:	f000 fef5 	bl	8001780 <HAL_Delay>
  while (bytes_read < size) {
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	429a      	cmp	r2, r3
 800099c:	d3de      	bcc.n	800095c <Buffer_ReadBytes+0x18>
  }

  return 1; // Başarılı
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000070 	.word	0x20000070

080009ac <Bootloader_Main>:
/**
 * @brief Main bootloader command processor
 * @return 1: Continue loop, 0: Exit loop (jump to app)
 */
uint8_t Bootloader_Main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0dc      	sub	sp, #368	@ 0x170
 80009b0:	af00      	add	r7, sp, #0
  uint8_t command;

  // Komut byte'ını al
  if (!Buffer_ReadBytes(&command, 1, 100)) {
 80009b2:	f207 134b 	addw	r3, r7, #331	@ 0x14b
 80009b6:	2264      	movs	r2, #100	@ 0x64
 80009b8:	2101      	movs	r1, #1
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ffc2 	bl	8000944 <Buffer_ReadBytes>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d101      	bne.n	80009ca <Bootloader_Main+0x1e>
    return 1; // Timeout, continue loop
 80009c6:	2301      	movs	r3, #1
 80009c8:	e297      	b.n	8000efa <Bootloader_Main+0x54e>
  }

  switch(command)
 80009ca:	f897 314b 	ldrb.w	r3, [r7, #331]	@ 0x14b
 80009ce:	3b10      	subs	r3, #16
 80009d0:	2b05      	cmp	r3, #5
 80009d2:	f200 8285 	bhi.w	8000ee0 <Bootloader_Main+0x534>
 80009d6:	a201      	add	r2, pc, #4	@ (adr r2, 80009dc <Bootloader_Main+0x30>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	080009f5 	.word	0x080009f5
 80009e0:	08000b6b 	.word	0x08000b6b
 80009e4:	08000c4f 	.word	0x08000c4f
 80009e8:	08000a2d 	.word	0x08000a2d
 80009ec:	08000d8d 	.word	0x08000d8d
 80009f0:	08000ea7 	.word	0x08000ea7
  {
    case CMD_GET_INFO:
    {
      uint8_t response[6];
      response[0] = RESP_OK;
 80009f4:	2390      	movs	r3, #144	@ 0x90
 80009f6:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
      response[1] = BOOTLOADER_VERSION;
 80009fa:	2301      	movs	r3, #1
 80009fc:	f887 3145 	strb.w	r3, [r7, #325]	@ 0x145
      response[2] = (APPLICATION_START_ADDRESS >> 24) & 0xFF;
 8000a00:	2308      	movs	r3, #8
 8000a02:	f887 3146 	strb.w	r3, [r7, #326]	@ 0x146
      response[3] = (APPLICATION_START_ADDRESS >> 16) & 0xFF;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
      response[4] = (APPLICATION_START_ADDRESS >> 8) & 0xFF;
 8000a0c:	2380      	movs	r3, #128	@ 0x80
 8000a0e:	f887 3148 	strb.w	r3, [r7, #328]	@ 0x148
      response[5] = APPLICATION_START_ADDRESS & 0xFF;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f887 3149 	strb.w	r3, [r7, #329]	@ 0x149

      HAL_UART_Transmit(&huart2, response, 6, 1000);
 8000a18:	f507 71a2 	add.w	r1, r7, #324	@ 0x144
 8000a1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a20:	2206      	movs	r2, #6
 8000a22:	48d9      	ldr	r0, [pc, #868]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000a24:	f002 fb3e 	bl	80030a4 <HAL_UART_Transmit>
      return 1; // Continue loop
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e266      	b.n	8000efa <Bootloader_Main+0x54e>
    }

    case CMD_READ_FLASH:
    {
      uint32_t address = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
      uint32_t size = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
      uint8_t data[256] = {0};
 8000a38:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8000a3c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8000a40:	4618      	mov	r0, r3
 8000a42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a46:	461a      	mov	r2, r3
 8000a48:	2100      	movs	r1, #0
 8000a4a:	f003 fb47 	bl	80040dc <memset>
      uint8_t addr_bytes[4];
      uint8_t size_bytes[4];

      // Address al (4 byte, little endian)
      if (!Buffer_ReadBytes(addr_bytes, 4, 1000))
 8000a4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000a52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a56:	2104      	movs	r1, #4
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff73 	bl	8000944 <Buffer_ReadBytes>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d10b      	bne.n	8000a7c <Bootloader_Main+0xd0>
      {
        uint8_t error = RESP_ERROR;
 8000a64:	2391      	movs	r3, #145	@ 0x91
 8000a66:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000a6a:	f207 113b 	addw	r1, r7, #315	@ 0x13b
 8000a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a72:	2201      	movs	r2, #1
 8000a74:	48c4      	ldr	r0, [pc, #784]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000a76:	f002 fb15 	bl	80030a4 <HAL_UART_Transmit>
        break;
 8000a7a:	e23e      	b.n	8000efa <Bootloader_Main+0x54e>
      }
      
      // Little endian'dan uint32_t'ye çevir
      address = (uint32_t)addr_bytes[0] | ((uint32_t)addr_bytes[1] << 8) | 
 8000a7c:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 8000a80:	461a      	mov	r2, r3
 8000a82:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 8000a86:	021b      	lsls	r3, r3, #8
 8000a88:	431a      	orrs	r2, r3
                ((uint32_t)addr_bytes[2] << 16) | ((uint32_t)addr_bytes[3] << 24);
 8000a8a:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 8000a8e:	041b      	lsls	r3, r3, #16
      address = (uint32_t)addr_bytes[0] | ((uint32_t)addr_bytes[1] << 8) | 
 8000a90:	431a      	orrs	r2, r3
                ((uint32_t)addr_bytes[2] << 16) | ((uint32_t)addr_bytes[3] << 24);
 8000a92:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 8000a96:	061b      	lsls	r3, r3, #24
      address = (uint32_t)addr_bytes[0] | ((uint32_t)addr_bytes[1] << 8) | 
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160

      // Size al (4 byte, little endian)
      if (!Buffer_ReadBytes(size_bytes, 4, 1000))
 8000a9e:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8000aa2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff4b 	bl	8000944 <Buffer_ReadBytes>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d10b      	bne.n	8000acc <Bootloader_Main+0x120>
      {
        uint8_t error = RESP_ERROR;
 8000ab4:	2391      	movs	r3, #145	@ 0x91
 8000ab6:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000aba:	f507 719d 	add.w	r1, r7, #314	@ 0x13a
 8000abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	48b0      	ldr	r0, [pc, #704]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000ac6:	f002 faed 	bl	80030a4 <HAL_UART_Transmit>
        break;
 8000aca:	e216      	b.n	8000efa <Bootloader_Main+0x54e>
      }
      
      // Little endian'dan uint32_t'ye çevir
      size = (uint32_t)size_bytes[0] | ((uint32_t)size_bytes[1] << 8) | 
 8000acc:	f897 313c 	ldrb.w	r3, [r7, #316]	@ 0x13c
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	f897 313d 	ldrb.w	r3, [r7, #317]	@ 0x13d
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	431a      	orrs	r2, r3
             ((uint32_t)size_bytes[2] << 16) | ((uint32_t)size_bytes[3] << 24);
 8000ada:	f897 313e 	ldrb.w	r3, [r7, #318]	@ 0x13e
 8000ade:	041b      	lsls	r3, r3, #16
      size = (uint32_t)size_bytes[0] | ((uint32_t)size_bytes[1] << 8) | 
 8000ae0:	431a      	orrs	r2, r3
             ((uint32_t)size_bytes[2] << 16) | ((uint32_t)size_bytes[3] << 24);
 8000ae2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8000ae6:	061b      	lsls	r3, r3, #24
      size = (uint32_t)size_bytes[0] | ((uint32_t)size_bytes[1] << 8) | 
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      // Boyut kontrolü
      if (size > 256) {
 8000aee:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000af6:	d90b      	bls.n	8000b10 <Bootloader_Main+0x164>
        uint8_t error = RESP_ERROR;
 8000af8:	2391      	movs	r3, #145	@ 0x91
 8000afa:	f887 3139 	strb.w	r3, [r7, #313]	@ 0x139
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000afe:	f207 1139 	addw	r1, r7, #313	@ 0x139
 8000b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b06:	2201      	movs	r2, #1
 8000b08:	489f      	ldr	r0, [pc, #636]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000b0a:	f002 facb 	bl	80030a4 <HAL_UART_Transmit>
        break;
 8000b0e:	e1f4      	b.n	8000efa <Bootloader_Main+0x54e>
      }

      // Flash'tan oku
      if (Bootloader_ReadFlash(address, data, size) == 0)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8000b16:	4619      	mov	r1, r3
 8000b18:	f8d7 0160 	ldr.w	r0, [r7, #352]	@ 0x160
 8000b1c:	f000 fb7c 	bl	8001218 <Bootloader_ReadFlash>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d114      	bne.n	8000b50 <Bootloader_Main+0x1a4>
      {
        uint8_t ok = RESP_OK;
 8000b26:	2390      	movs	r3, #144	@ 0x90
 8000b28:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
        HAL_UART_Transmit(&huart2, &ok, 1, 1000);
 8000b2c:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8000b30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b34:	2201      	movs	r2, #1
 8000b36:	4894      	ldr	r0, [pc, #592]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000b38:	f002 fab4 	bl	80030a4 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, data, size, 1000);
 8000b3c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	1d39      	adds	r1, r7, #4
 8000b44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b48:	488f      	ldr	r0, [pc, #572]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000b4a:	f002 faab 	bl	80030a4 <HAL_UART_Transmit>
 8000b4e:	e00a      	b.n	8000b66 <Bootloader_Main+0x1ba>
      }
      else
      {
        uint8_t error = RESP_ERROR;
 8000b50:	2391      	movs	r3, #145	@ 0x91
 8000b52:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000b56:	f207 1137 	addw	r1, r7, #311	@ 0x137
 8000b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4889      	ldr	r0, [pc, #548]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000b62:	f002 fa9f 	bl	80030a4 <HAL_UART_Transmit>
      }
      return 1; // Continue loop
 8000b66:	2301      	movs	r3, #1
 8000b68:	e1c7      	b.n	8000efa <Bootloader_Main+0x54e>
      uint32_t size;
      uint8_t addr_bytes[4];
      uint8_t size_bytes[4];

      // Address al (4 byte, little endian)
      if (!Buffer_ReadBytes(addr_bytes, 4, 1000))
 8000b6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b72:	2104      	movs	r1, #4
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fee5 	bl	8000944 <Buffer_ReadBytes>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d10b      	bne.n	8000b98 <Bootloader_Main+0x1ec>
      {
        uint8_t error = RESP_ERROR;
 8000b80:	2391      	movs	r3, #145	@ 0x91
 8000b82:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000b86:	f207 112b 	addw	r1, r7, #299	@ 0x12b
 8000b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8e:	2201      	movs	r2, #1
 8000b90:	487d      	ldr	r0, [pc, #500]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000b92:	f002 fa87 	bl	80030a4 <HAL_UART_Transmit>
        break;
 8000b96:	e1b0      	b.n	8000efa <Bootloader_Main+0x54e>
      }
      
      // Little endian'dan uint32_t'ye çevir
      address = (uint32_t)addr_bytes[0] | ((uint32_t)addr_bytes[1] << 8) | 
 8000b98:	f897 3130 	ldrb.w	r3, [r7, #304]	@ 0x130
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	431a      	orrs	r2, r3
                ((uint32_t)addr_bytes[2] << 16) | ((uint32_t)addr_bytes[3] << 24);
 8000ba6:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 8000baa:	041b      	lsls	r3, r3, #16
      address = (uint32_t)addr_bytes[0] | ((uint32_t)addr_bytes[1] << 8) | 
 8000bac:	431a      	orrs	r2, r3
                ((uint32_t)addr_bytes[2] << 16) | ((uint32_t)addr_bytes[3] << 24);
 8000bae:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8000bb2:	061b      	lsls	r3, r3, #24
      address = (uint32_t)addr_bytes[0] | ((uint32_t)addr_bytes[1] << 8) | 
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

      // Size al (4 byte, little endian)
      if (!Buffer_ReadBytes(size_bytes, 4, 1000))
 8000bba:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8000bbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff febd 	bl	8000944 <Buffer_ReadBytes>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10b      	bne.n	8000be8 <Bootloader_Main+0x23c>
      {
        uint8_t error = RESP_ERROR;
 8000bd0:	2391      	movs	r3, #145	@ 0x91
 8000bd2:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000bd6:	f507 7195 	add.w	r1, r7, #298	@ 0x12a
 8000bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bde:	2201      	movs	r2, #1
 8000be0:	4869      	ldr	r0, [pc, #420]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000be2:	f002 fa5f 	bl	80030a4 <HAL_UART_Transmit>
        break;
 8000be6:	e188      	b.n	8000efa <Bootloader_Main+0x54e>
      }
      
      // Little endian'dan uint32_t'ye çevir
      size = (uint32_t)size_bytes[0] | ((uint32_t)size_bytes[1] << 8) | 
 8000be8:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8000bec:	461a      	mov	r2, r3
 8000bee:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8000bf2:	021b      	lsls	r3, r3, #8
 8000bf4:	431a      	orrs	r2, r3
             ((uint32_t)size_bytes[2] << 16) | ((uint32_t)size_bytes[3] << 24);
 8000bf6:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8000bfa:	041b      	lsls	r3, r3, #16
      size = (uint32_t)size_bytes[0] | ((uint32_t)size_bytes[1] << 8) | 
 8000bfc:	431a      	orrs	r2, r3
             ((uint32_t)size_bytes[2] << 16) | ((uint32_t)size_bytes[3] << 24);
 8000bfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8000c02:	061b      	lsls	r3, r3, #24
      size = (uint32_t)size_bytes[0] | ((uint32_t)size_bytes[1] << 8) | 
 8000c04:	4313      	orrs	r3, r2
 8000c06:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

      // Flash'ı sil
      if (Bootloader_EraseFlash(address, size) == 0)
 8000c0a:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8000c0e:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000c12:	f000 f9e5 	bl	8000fe0 <Bootloader_EraseFlash>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10b      	bne.n	8000c34 <Bootloader_Main+0x288>
      {
        uint8_t ok = RESP_OK;
 8000c1c:	2390      	movs	r3, #144	@ 0x90
 8000c1e:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
        HAL_UART_Transmit(&huart2, &ok, 1, 1000);
 8000c22:	f207 1129 	addw	r1, r7, #297	@ 0x129
 8000c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4856      	ldr	r0, [pc, #344]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000c2e:	f002 fa39 	bl	80030a4 <HAL_UART_Transmit>
 8000c32:	e00a      	b.n	8000c4a <Bootloader_Main+0x29e>
      }
      else
      {
        uint8_t error = RESP_ERROR;
 8000c34:	2391      	movs	r3, #145	@ 0x91
 8000c36:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000c3a:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8000c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c42:	2201      	movs	r2, #1
 8000c44:	4850      	ldr	r0, [pc, #320]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000c46:	f002 fa2d 	bl	80030a4 <HAL_UART_Transmit>
      }
      return 1; // Continue loop
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e155      	b.n	8000efa <Bootloader_Main+0x54e>
      uint8_t data[256];
      uint8_t addr_bytes[4];
      uint8_t size_bytes[4];

      // Address al (4 byte, little endian)
      if (!Buffer_ReadBytes(addr_bytes, 4, 1000))
 8000c4e:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000c52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c56:	2104      	movs	r1, #4
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fe73 	bl	8000944 <Buffer_ReadBytes>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d10b      	bne.n	8000c7c <Bootloader_Main+0x2d0>
      {
        uint8_t error = RESP_ERROR;
 8000c64:	2391      	movs	r3, #145	@ 0x91
 8000c66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000c6a:	f207 111f 	addw	r1, r7, #287	@ 0x11f
 8000c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c72:	2201      	movs	r2, #1
 8000c74:	4844      	ldr	r0, [pc, #272]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000c76:	f002 fa15 	bl	80030a4 <HAL_UART_Transmit>
        break;
 8000c7a:	e13e      	b.n	8000efa <Bootloader_Main+0x54e>
      }
      
      // Little endian'dan uint32_t'ye çevir
      address = (uint32_t)addr_bytes[0] | ((uint32_t)addr_bytes[1] << 8) | 
 8000c7c:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 8000c80:	461a      	mov	r2, r3
 8000c82:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	431a      	orrs	r2, r3
                ((uint32_t)addr_bytes[2] << 16) | ((uint32_t)addr_bytes[3] << 24);
 8000c8a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8000c8e:	041b      	lsls	r3, r3, #16
      address = (uint32_t)addr_bytes[0] | ((uint32_t)addr_bytes[1] << 8) | 
 8000c90:	431a      	orrs	r2, r3
                ((uint32_t)addr_bytes[2] << 16) | ((uint32_t)addr_bytes[3] << 24);
 8000c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8000c96:	061b      	lsls	r3, r3, #24
      address = (uint32_t)addr_bytes[0] | ((uint32_t)addr_bytes[1] << 8) | 
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158

      // Size al (4 byte, little endian)
      if (!Buffer_ReadBytes(size_bytes, 4, 1000))
 8000c9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ca2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fe4b 	bl	8000944 <Buffer_ReadBytes>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10b      	bne.n	8000ccc <Bootloader_Main+0x320>
      {
        uint8_t error = RESP_ERROR;
 8000cb4:	2391      	movs	r3, #145	@ 0x91
 8000cb6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000cba:	f507 718f 	add.w	r1, r7, #286	@ 0x11e
 8000cbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4830      	ldr	r0, [pc, #192]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000cc6:	f002 f9ed 	bl	80030a4 <HAL_UART_Transmit>
        break;
 8000cca:	e116      	b.n	8000efa <Bootloader_Main+0x54e>
      }
      
      // Little endian'dan uint32_t'ye çevir
      size = (uint32_t)size_bytes[0] | ((uint32_t)size_bytes[1] << 8) | 
 8000ccc:	f897 3120 	ldrb.w	r3, [r7, #288]	@ 0x120
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 8000cd6:	021b      	lsls	r3, r3, #8
 8000cd8:	431a      	orrs	r2, r3
             ((uint32_t)size_bytes[2] << 16) | ((uint32_t)size_bytes[3] << 24);
 8000cda:	f897 3122 	ldrb.w	r3, [r7, #290]	@ 0x122
 8000cde:	041b      	lsls	r3, r3, #16
      size = (uint32_t)size_bytes[0] | ((uint32_t)size_bytes[1] << 8) | 
 8000ce0:	431a      	orrs	r2, r3
             ((uint32_t)size_bytes[2] << 16) | ((uint32_t)size_bytes[3] << 24);
 8000ce2:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8000ce6:	061b      	lsls	r3, r3, #24
      size = (uint32_t)size_bytes[0] | ((uint32_t)size_bytes[1] << 8) | 
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

      // Boyut kontrolü
      if (size > 256) {
 8000cee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cf6:	d90b      	bls.n	8000d10 <Bootloader_Main+0x364>
        uint8_t error = RESP_ERROR;
 8000cf8:	2391      	movs	r3, #145	@ 0x91
 8000cfa:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000cfe:	f207 111d 	addw	r1, r7, #285	@ 0x11d
 8000d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d06:	2201      	movs	r2, #1
 8000d08:	481f      	ldr	r0, [pc, #124]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000d0a:	f002 f9cb 	bl	80030a4 <HAL_UART_Transmit>
        break;
 8000d0e:	e0f4      	b.n	8000efa <Bootloader_Main+0x54e>
      }

      // Data al (size byte)
      if (!Buffer_ReadBytes(data, size, 2000))
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d16:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fe12 	bl	8000944 <Buffer_ReadBytes>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10b      	bne.n	8000d3e <Bootloader_Main+0x392>
      {
        uint8_t error = RESP_ERROR;
 8000d26:	2391      	movs	r3, #145	@ 0x91
 8000d28:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000d2c:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 8000d30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d34:	2201      	movs	r2, #1
 8000d36:	4814      	ldr	r0, [pc, #80]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000d38:	f002 f9b4 	bl	80030a4 <HAL_UART_Transmit>
        break;
 8000d3c:	e0dd      	b.n	8000efa <Bootloader_Main+0x54e>
      }

      // Flash'a yaz
      if (Bootloader_WriteFlash(address, data, size) == 0)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8000d44:	4619      	mov	r1, r3
 8000d46:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8000d4a:	f000 f9cd 	bl	80010e8 <Bootloader_WriteFlash>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10b      	bne.n	8000d6c <Bootloader_Main+0x3c0>
      {
        uint8_t ok = RESP_OK;
 8000d54:	2390      	movs	r3, #144	@ 0x90
 8000d56:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        HAL_UART_Transmit(&huart2, &ok, 1, 1000);
 8000d5a:	f207 111b 	addw	r1, r7, #283	@ 0x11b
 8000d5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d62:	2201      	movs	r2, #1
 8000d64:	4808      	ldr	r0, [pc, #32]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000d66:	f002 f99d 	bl	80030a4 <HAL_UART_Transmit>
 8000d6a:	e00a      	b.n	8000d82 <Bootloader_Main+0x3d6>
      }
      else
      {
        uint8_t error = RESP_ERROR;
 8000d6c:	2391      	movs	r3, #145	@ 0x91
 8000d6e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000d72:	f507 718d 	add.w	r1, r7, #282	@ 0x11a
 8000d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <Bootloader_Main+0x3dc>)
 8000d7e:	f002 f991 	bl	80030a4 <HAL_UART_Transmit>
      }
      return 1; // Continue loop
 8000d82:	2301      	movs	r3, #1
 8000d84:	e0b9      	b.n	8000efa <Bootloader_Main+0x54e>
 8000d86:	bf00      	nop
 8000d88:	20000028 	.word	0x20000028
      uint32_t size;
      uint8_t addr_bytes[4];
      uint8_t size_bytes[4];

      // Address al (4 byte, little endian)
      if (!Buffer_ReadBytes(addr_bytes, 4, 1000))
 8000d8c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8000d90:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d94:	2104      	movs	r1, #4
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fdd4 	bl	8000944 <Buffer_ReadBytes>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10b      	bne.n	8000dba <Bootloader_Main+0x40e>
      {
        uint8_t error = RESP_ERROR;
 8000da2:	2391      	movs	r3, #145	@ 0x91
 8000da4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000da8:	f207 110f 	addw	r1, r7, #271	@ 0x10f
 8000dac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db0:	2201      	movs	r2, #1
 8000db2:	4854      	ldr	r0, [pc, #336]	@ (8000f04 <Bootloader_Main+0x558>)
 8000db4:	f002 f976 	bl	80030a4 <HAL_UART_Transmit>
        break;
 8000db8:	e09f      	b.n	8000efa <Bootloader_Main+0x54e>
      }
      
      // Little endian'dan uint32_t'ye çevir
      address = (uint32_t)addr_bytes[0] | ((uint32_t)addr_bytes[1] << 8) | 
 8000dba:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	431a      	orrs	r2, r3
                ((uint32_t)addr_bytes[2] << 16) | ((uint32_t)addr_bytes[3] << 24);
 8000dc8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000dcc:	041b      	lsls	r3, r3, #16
      address = (uint32_t)addr_bytes[0] | ((uint32_t)addr_bytes[1] << 8) | 
 8000dce:	431a      	orrs	r2, r3
                ((uint32_t)addr_bytes[2] << 16) | ((uint32_t)addr_bytes[3] << 24);
 8000dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000dd4:	061b      	lsls	r3, r3, #24
      address = (uint32_t)addr_bytes[0] | ((uint32_t)addr_bytes[1] << 8) | 
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

      // Size al (4 byte, little endian)
      if (!Buffer_ReadBytes(size_bytes, 4, 1000))
 8000ddc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000de0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000de4:	2104      	movs	r1, #4
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fdac 	bl	8000944 <Buffer_ReadBytes>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10b      	bne.n	8000e0a <Bootloader_Main+0x45e>
      {
        uint8_t error = RESP_ERROR;
 8000df2:	2391      	movs	r3, #145	@ 0x91
 8000df4:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000df8:	f507 7187 	add.w	r1, r7, #270	@ 0x10e
 8000dfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e00:	2201      	movs	r2, #1
 8000e02:	4840      	ldr	r0, [pc, #256]	@ (8000f04 <Bootloader_Main+0x558>)
 8000e04:	f002 f94e 	bl	80030a4 <HAL_UART_Transmit>
        break;
 8000e08:	e077      	b.n	8000efa <Bootloader_Main+0x54e>
      }
      
      // Little endian'dan uint32_t'ye çevir
      size = (uint32_t)size_bytes[0] | ((uint32_t)size_bytes[1] << 8) | 
 8000e0a:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 8000e0e:	461a      	mov	r2, r3
 8000e10:	f897 3111 	ldrb.w	r3, [r7, #273]	@ 0x111
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	431a      	orrs	r2, r3
             ((uint32_t)size_bytes[2] << 16) | ((uint32_t)size_bytes[3] << 24);
 8000e18:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 8000e1c:	041b      	lsls	r3, r3, #16
      size = (uint32_t)size_bytes[0] | ((uint32_t)size_bytes[1] << 8) | 
 8000e1e:	431a      	orrs	r2, r3
             ((uint32_t)size_bytes[2] << 16) | ((uint32_t)size_bytes[3] << 24);
 8000e20:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8000e24:	061b      	lsls	r3, r3, #24
      size = (uint32_t)size_bytes[0] | ((uint32_t)size_bytes[1] << 8) | 
 8000e26:	4313      	orrs	r3, r2
 8000e28:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168

      // Checksum hesapla
      uint32_t checksum = Bootloader_CalculateChecksum(address, size);
 8000e2c:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 8000e30:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8000e34:	f000 fa24 	bl	8001280 <Bootloader_CalculateChecksum>
 8000e38:	f8c7 0164 	str.w	r0, [r7, #356]	@ 0x164

      if (checksum != 0xFFFFFFFF)
 8000e3c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d022      	beq.n	8000e8c <Bootloader_Main+0x4e0>
      {
        uint8_t response[5];
        response[0] = RESP_OK;
 8000e46:	2390      	movs	r3, #144	@ 0x90
 8000e48:	f887 3108 	strb.w	r3, [r7, #264]	@ 0x108
        // Little endian formatında gönder
        response[1] = checksum & 0xFF;
 8000e4c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
        response[2] = (checksum >> 8) & 0xFF;
 8000e56:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000e5a:	0a1b      	lsrs	r3, r3, #8
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
        response[3] = (checksum >> 16) & 0xFF;
 8000e62:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000e66:	0c1b      	lsrs	r3, r3, #16
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        response[4] = (checksum >> 24) & 0xFF;
 8000e6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000e72:	0e1b      	lsrs	r3, r3, #24
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c

        HAL_UART_Transmit(&huart2, response, 5, 1000);
 8000e7a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8000e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e82:	2205      	movs	r2, #5
 8000e84:	481f      	ldr	r0, [pc, #124]	@ (8000f04 <Bootloader_Main+0x558>)
 8000e86:	f002 f90d 	bl	80030a4 <HAL_UART_Transmit>
 8000e8a:	e00a      	b.n	8000ea2 <Bootloader_Main+0x4f6>
      }
      else
      {
        uint8_t error = RESP_ERROR;
 8000e8c:	2391      	movs	r3, #145	@ 0x91
 8000e8e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
        HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000e92:	f207 1107 	addw	r1, r7, #263	@ 0x107
 8000e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4819      	ldr	r0, [pc, #100]	@ (8000f04 <Bootloader_Main+0x558>)
 8000e9e:	f002 f901 	bl	80030a4 <HAL_UART_Transmit>
      }
      return 1; // Continue loop
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e029      	b.n	8000efa <Bootloader_Main+0x54e>
    }

    case CMD_JUMP_TO_APP:
    {
      // Önce OK yanıtı gönder
      uint8_t ok = RESP_OK;
 8000ea6:	2390      	movs	r3, #144	@ 0x90
 8000ea8:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
      HAL_UART_Transmit(&huart2, &ok, 1, 1000);
 8000eac:	f507 7183 	add.w	r1, r7, #262	@ 0x106
 8000eb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4813      	ldr	r0, [pc, #76]	@ (8000f04 <Bootloader_Main+0x558>)
 8000eb8:	f002 f8f4 	bl	80030a4 <HAL_UART_Transmit>

      // Kısa bekle
      HAL_Delay(100);
 8000ebc:	2064      	movs	r0, #100	@ 0x64
 8000ebe:	f000 fc5f 	bl	8001780 <HAL_Delay>

      // Application'a atla
      Bootloader_JumpToApplication();
 8000ec2:	f000 f821 	bl	8000f08 <Bootloader_JumpToApplication>

      // ASLA BURAYA ULAŞILMAMALI!
      // Eğer ulaşılırsa hata gönder ve loop'tan çık
      uint8_t error = RESP_ERROR;
 8000ec6:	2391      	movs	r3, #145	@ 0x91
 8000ec8:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
      HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000ecc:	f207 1105 	addw	r1, r7, #261	@ 0x105
 8000ed0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	480b      	ldr	r0, [pc, #44]	@ (8000f04 <Bootloader_Main+0x558>)
 8000ed8:	f002 f8e4 	bl	80030a4 <HAL_UART_Transmit>
      return 0; // Exit loop
 8000edc:	2300      	movs	r3, #0
 8000ede:	e00c      	b.n	8000efa <Bootloader_Main+0x54e>
    }

    default:
    {
      uint8_t error = RESP_INVALID_CMD;
 8000ee0:	2392      	movs	r3, #146	@ 0x92
 8000ee2:	f887 3104 	strb.w	r3, [r7, #260]	@ 0x104
      HAL_UART_Transmit(&huart2, &error, 1, 1000);
 8000ee6:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 8000eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <Bootloader_Main+0x558>)
 8000ef2:	f002 f8d7 	bl	80030a4 <HAL_UART_Transmit>
      return 1; // Continue loop
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e7ff      	b.n	8000efa <Bootloader_Main+0x54e>
    }
  }
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000028 	.word	0x20000028

08000f08 <Bootloader_JumpToApplication>:

/**
  * @brief Jump to user application
  */
void Bootloader_JumpToApplication(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
  uint32_t app_stack_ptr = *(volatile uint32_t*)APPLICATION_START_ADDRESS;
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc4 <Bootloader_JumpToApplication+0xbc>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	613b      	str	r3, [r7, #16]
  uint32_t app_reset_handler = *(volatile uint32_t*)(APPLICATION_START_ADDRESS + 4);
 8000f14:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc8 <Bootloader_JumpToApplication+0xc0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]

  // STM32F446 için doğru stack pointer kontrolü
  // SRAM1: 0x20000000-0x2001FFFF (128KB)
  // SRAM2: 0x20020000-0x2002FFFF (64KB) 
  // SRAM3: 0x20030000-0x2003FFFF (64KB)
  if (app_stack_ptr < 0x20000000 || app_stack_ptr > 0x20040000)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f20:	d349      	bcc.n	8000fb6 <Bootloader_JumpToApplication+0xae>
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4a29      	ldr	r2, [pc, #164]	@ (8000fcc <Bootloader_JumpToApplication+0xc4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d845      	bhi.n	8000fb6 <Bootloader_JumpToApplication+0xae>
  {
    return; // Geçersiz stack pointer
  }

  // Reset handler kontrol et
  if (app_reset_handler == 0xFFFFFFFF ||
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d043      	beq.n	8000fba <Bootloader_JumpToApplication+0xb2>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4a23      	ldr	r2, [pc, #140]	@ (8000fc4 <Bootloader_JumpToApplication+0xbc>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d33f      	bcc.n	8000fba <Bootloader_JumpToApplication+0xb2>
      app_reset_handler < APPLICATION_START_ADDRESS ||
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4a24      	ldr	r2, [pc, #144]	@ (8000fd0 <Bootloader_JumpToApplication+0xc8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d83b      	bhi.n	8000fba <Bootloader_JumpToApplication+0xb2>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f42:	b672      	cpsid	i
}
 8000f44:	bf00      	nop

  // Bootloader'ı temizle
  __disable_irq();

  // SysTick'i durdur
  SysTick->CTRL = 0;
 8000f46:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <Bootloader_JumpToApplication+0xcc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <Bootloader_JumpToApplication+0xcc>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <Bootloader_JumpToApplication+0xcc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]

  // HAL'ı deinitialize et
  HAL_DeInit();
 8000f58:	f000 fb8c 	bl	8001674 <HAL_DeInit>

  // Tüm interrupt'ları temizle
  for (int i = 0; i < 8; i++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e010      	b.n	8000f84 <Bootloader_JumpToApplication+0x7c>
  {
    NVIC->ICER[i] = 0xFFFFFFFF;
 8000f62:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd8 <Bootloader_JumpToApplication+0xd0>)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3320      	adds	r3, #32
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NVIC->ICPR[i] = 0xFFFFFFFF;
 8000f70:	4a19      	ldr	r2, [pc, #100]	@ (8000fd8 <Bootloader_JumpToApplication+0xd0>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3360      	adds	r3, #96	@ 0x60
 8000f76:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < 8; i++)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b07      	cmp	r3, #7
 8000f88:	ddeb      	ble.n	8000f62 <Bootloader_JumpToApplication+0x5a>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f8a:	f3bf 8f4f 	dsb	sy
}
 8000f8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f90:	f3bf 8f6f 	isb	sy
}
 8000f94:	bf00      	nop
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f383 8808 	msr	MSP, r3
}
 8000fa0:	bf00      	nop

  // Stack pointer'ı ayarla
  __set_MSP(app_stack_ptr);

  // Vector table'ı yeni konuma kaydır
  SCB->VTOR = APPLICATION_START_ADDRESS;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <Bootloader_JumpToApplication+0xd4>)
 8000fa4:	4a07      	ldr	r2, [pc, #28]	@ (8000fc4 <Bootloader_JumpToApplication+0xbc>)
 8000fa6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000fa8:	b662      	cpsie	i
}
 8000faa:	bf00      	nop

  // Interrupt'ları aktif et
  __enable_irq();

  // Application'a atla
  void (*app_reset)(void) = (void*)app_reset_handler;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	60bb      	str	r3, [r7, #8]
  app_reset();
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4798      	blx	r3
 8000fb4:	e002      	b.n	8000fbc <Bootloader_JumpToApplication+0xb4>
    return; // Geçersiz stack pointer
 8000fb6:	bf00      	nop
 8000fb8:	e000      	b.n	8000fbc <Bootloader_JumpToApplication+0xb4>
    return; // Geçersiz reset handler
 8000fba:	bf00      	nop
}
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	08008000 	.word	0x08008000
 8000fc8:	08008004 	.word	0x08008004
 8000fcc:	20040000 	.word	0x20040000
 8000fd0:	0807ffff 	.word	0x0807ffff
 8000fd4:	e000e010 	.word	0xe000e010
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Bootloader_EraseFlash>:

/**
 * @brief Erase flash memory
 */
uint8_t Bootloader_EraseFlash(uint32_t start_address, uint32_t size)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  FLASH_EraseInitTypeDef erase_init;
  uint32_t sector_error;

  // Güvenlik kontrolü - sadece uygulama alanını silebiliriz
  if (start_address < APPLICATION_START_ADDRESS)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a37      	ldr	r2, [pc, #220]	@ (80010cc <Bootloader_EraseFlash+0xec>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d201      	bcs.n	8000ff6 <Bootloader_EraseFlash+0x16>
  {
    return 1; // Bootloader alanını silemez
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e065      	b.n	80010c2 <Bootloader_EraseFlash+0xe2>
  }

  if (start_address >= 0x08080000)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a35      	ldr	r2, [pc, #212]	@ (80010d0 <Bootloader_EraseFlash+0xf0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d901      	bls.n	8001002 <Bootloader_EraseFlash+0x22>
  {
    return 1; // Flash sınırları dışı
 8000ffe:	2301      	movs	r3, #1
 8001000:	e05f      	b.n	80010c2 <Bootloader_EraseFlash+0xe2>
  }

  // Hangi sektörü sileceğimizi belirle
  uint32_t start_sector;
  if (start_address >= 0x08008000 && start_address < 0x0800C000)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a31      	ldr	r2, [pc, #196]	@ (80010cc <Bootloader_EraseFlash+0xec>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d306      	bcc.n	8001018 <Bootloader_EraseFlash+0x38>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a31      	ldr	r2, [pc, #196]	@ (80010d4 <Bootloader_EraseFlash+0xf4>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d202      	bcs.n	8001018 <Bootloader_EraseFlash+0x38>
    start_sector = FLASH_SECTOR_2;
 8001012:	2302      	movs	r3, #2
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
 8001016:	e038      	b.n	800108a <Bootloader_EraseFlash+0xaa>
  else if (start_address >= 0x0800C000 && start_address < 0x08010000)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a2e      	ldr	r2, [pc, #184]	@ (80010d4 <Bootloader_EraseFlash+0xf4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d306      	bcc.n	800102e <Bootloader_EraseFlash+0x4e>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a2d      	ldr	r2, [pc, #180]	@ (80010d8 <Bootloader_EraseFlash+0xf8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d802      	bhi.n	800102e <Bootloader_EraseFlash+0x4e>
    start_sector = FLASH_SECTOR_3;
 8001028:	2303      	movs	r3, #3
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
 800102c:	e02d      	b.n	800108a <Bootloader_EraseFlash+0xaa>
  else if (start_address >= 0x08010000 && start_address < 0x08020000)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a29      	ldr	r2, [pc, #164]	@ (80010d8 <Bootloader_EraseFlash+0xf8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d906      	bls.n	8001044 <Bootloader_EraseFlash+0x64>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a28      	ldr	r2, [pc, #160]	@ (80010dc <Bootloader_EraseFlash+0xfc>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d802      	bhi.n	8001044 <Bootloader_EraseFlash+0x64>
    start_sector = FLASH_SECTOR_4;
 800103e:	2304      	movs	r3, #4
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
 8001042:	e022      	b.n	800108a <Bootloader_EraseFlash+0xaa>
  else if (start_address >= 0x08020000 && start_address < 0x08040000)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a25      	ldr	r2, [pc, #148]	@ (80010dc <Bootloader_EraseFlash+0xfc>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d906      	bls.n	800105a <Bootloader_EraseFlash+0x7a>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a24      	ldr	r2, [pc, #144]	@ (80010e0 <Bootloader_EraseFlash+0x100>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d802      	bhi.n	800105a <Bootloader_EraseFlash+0x7a>
    start_sector = FLASH_SECTOR_5;
 8001054:	2305      	movs	r3, #5
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
 8001058:	e017      	b.n	800108a <Bootloader_EraseFlash+0xaa>
  else if (start_address >= 0x08040000 && start_address < 0x08060000)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a20      	ldr	r2, [pc, #128]	@ (80010e0 <Bootloader_EraseFlash+0x100>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d906      	bls.n	8001070 <Bootloader_EraseFlash+0x90>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a1f      	ldr	r2, [pc, #124]	@ (80010e4 <Bootloader_EraseFlash+0x104>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d802      	bhi.n	8001070 <Bootloader_EraseFlash+0x90>
    start_sector = FLASH_SECTOR_6;
 800106a:	2306      	movs	r3, #6
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
 800106e:	e00c      	b.n	800108a <Bootloader_EraseFlash+0xaa>
  else if (start_address >= 0x08060000 && start_address < 0x08080000)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a1c      	ldr	r2, [pc, #112]	@ (80010e4 <Bootloader_EraseFlash+0x104>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d906      	bls.n	8001086 <Bootloader_EraseFlash+0xa6>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a15      	ldr	r2, [pc, #84]	@ (80010d0 <Bootloader_EraseFlash+0xf0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d802      	bhi.n	8001086 <Bootloader_EraseFlash+0xa6>
    start_sector = FLASH_SECTOR_7;
 8001080:	2307      	movs	r3, #7
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
 8001084:	e001      	b.n	800108a <Bootloader_EraseFlash+0xaa>
  else
    return 1; // Geçersiz adres
 8001086:	2301      	movs	r3, #1
 8001088:	e01b      	b.n	80010c2 <Bootloader_EraseFlash+0xe2>

  HAL_FLASH_Unlock();
 800108a:	f000 fd93 	bl	8001bb4 <HAL_FLASH_Unlock>

  erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  erase_init.Sector = start_sector;
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	61bb      	str	r3, [r7, #24]
  erase_init.NbSectors = 1; // Sadece bir sektör sil
 8001096:	2301      	movs	r3, #1
 8001098:	61fb      	str	r3, [r7, #28]
  erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800109a:	2302      	movs	r3, #2
 800109c:	623b      	str	r3, [r7, #32]

  if (HAL_FLASHEx_Erase(&erase_init, &sector_error) != HAL_OK)
 800109e:	f107 020c 	add.w	r2, r7, #12
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fef5 	bl	8001e98 <HAL_FLASHEx_Erase>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <Bootloader_EraseFlash+0xdc>
  {
    HAL_FLASH_Lock();
 80010b4:	f000 fda0 	bl	8001bf8 <HAL_FLASH_Lock>
    return 1; // Hata
 80010b8:	2301      	movs	r3, #1
 80010ba:	e002      	b.n	80010c2 <Bootloader_EraseFlash+0xe2>
  }

  HAL_FLASH_Lock();
 80010bc:	f000 fd9c 	bl	8001bf8 <HAL_FLASH_Lock>
  return 0; // Başarılı
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3728      	adds	r7, #40	@ 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	08008000 	.word	0x08008000
 80010d0:	0807ffff 	.word	0x0807ffff
 80010d4:	0800c000 	.word	0x0800c000
 80010d8:	0800ffff 	.word	0x0800ffff
 80010dc:	0801ffff 	.word	0x0801ffff
 80010e0:	0803ffff 	.word	0x0803ffff
 80010e4:	0805ffff 	.word	0x0805ffff

080010e8 <Bootloader_WriteFlash>:

/**
 * @brief Write data to flash memory (Word-aligned)
 */
uint8_t Bootloader_WriteFlash(uint32_t address, uint8_t *data, uint32_t size)
{
 80010e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ec:	b088      	sub	sp, #32
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
  // Güvenlik kontrolü - sadece uygulama alanına yazabilriz
  if (address < APPLICATION_START_ADDRESS)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4a44      	ldr	r2, [pc, #272]	@ (800120c <Bootloader_WriteFlash+0x124>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d201      	bcs.n	8001102 <Bootloader_WriteFlash+0x1a>
  {
    return 1; // Bootloader alanına yazamaz
 80010fe:	2301      	movs	r3, #1
 8001100:	e07f      	b.n	8001202 <Bootloader_WriteFlash+0x11a>
  }

  if (address >= 0x08080000)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4a42      	ldr	r2, [pc, #264]	@ (8001210 <Bootloader_WriteFlash+0x128>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d901      	bls.n	800110e <Bootloader_WriteFlash+0x26>
  {
    return 1; // Flash sınırları dışı
 800110a:	2301      	movs	r3, #1
 800110c:	e079      	b.n	8001202 <Bootloader_WriteFlash+0x11a>
  }

  if (address + size > 0x08080000)
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	4a3f      	ldr	r2, [pc, #252]	@ (8001214 <Bootloader_WriteFlash+0x12c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d901      	bls.n	800111e <Bootloader_WriteFlash+0x36>
  {
    return 1; // Flash sınırını aşıyor
 800111a:	2301      	movs	r3, #1
 800111c:	e071      	b.n	8001202 <Bootloader_WriteFlash+0x11a>
  }

  if (size > 256)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001124:	d901      	bls.n	800112a <Bootloader_WriteFlash+0x42>
  {
    return 1; // Çok büyük
 8001126:	2301      	movs	r3, #1
 8001128:	e06b      	b.n	8001202 <Bootloader_WriteFlash+0x11a>
  }

  HAL_FLASH_Unlock();
 800112a:	f000 fd43 	bl	8001bb4 <HAL_FLASH_Unlock>

  // STM32F4 için word (4 byte) hizalı yazma gerekli
  uint32_t write_address = address;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	61fb      	str	r3, [r7, #28]
  uint32_t remaining = size;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	61bb      	str	r3, [r7, #24]
  uint32_t data_index = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]

  while (remaining > 0) {
 800113a:	e05c      	b.n	80011f6 <Bootloader_WriteFlash+0x10e>
    if (remaining >= 4 && (write_address % 4 == 0)) {
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d93b      	bls.n	80011ba <Bootloader_WriteFlash+0xd2>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d136      	bne.n	80011ba <Bootloader_WriteFlash+0xd2>
      // 4 byte hizalı word yazma
      uint32_t word_data = ((uint32_t)data[data_index]) |
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
                          ((uint32_t)data[data_index + 1] << 8) |
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	021b      	lsls	r3, r3, #8
      uint32_t word_data = ((uint32_t)data[data_index]) |
 8001162:	ea41 0203 	orr.w	r2, r1, r3
                          ((uint32_t)data[data_index + 2] << 16) |
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3302      	adds	r3, #2
 800116a:	68b9      	ldr	r1, [r7, #8]
 800116c:	440b      	add	r3, r1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	041b      	lsls	r3, r3, #16
                          ((uint32_t)data[data_index + 1] << 8) |
 8001172:	431a      	orrs	r2, r3
                          ((uint32_t)data[data_index + 3] << 24);
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3303      	adds	r3, #3
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	440b      	add	r3, r1
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	061b      	lsls	r3, r3, #24
      uint32_t word_data = ((uint32_t)data[data_index]) |
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
      
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, write_address, word_data) != HAL_OK) {
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	2200      	movs	r2, #0
 8001188:	461c      	mov	r4, r3
 800118a:	4615      	mov	r5, r2
 800118c:	4622      	mov	r2, r4
 800118e:	462b      	mov	r3, r5
 8001190:	69f9      	ldr	r1, [r7, #28]
 8001192:	2002      	movs	r0, #2
 8001194:	f000 fcbc 	bl	8001b10 <HAL_FLASH_Program>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <Bootloader_WriteFlash+0xbe>
        HAL_FLASH_Lock();
 800119e:	f000 fd2b 	bl	8001bf8 <HAL_FLASH_Lock>
        return 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e02d      	b.n	8001202 <Bootloader_WriteFlash+0x11a>
      }
      write_address += 4;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	61fb      	str	r3, [r7, #28]
      data_index += 4;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3304      	adds	r3, #4
 80011b0:	617b      	str	r3, [r7, #20]
      remaining -= 4;
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	3b04      	subs	r3, #4
 80011b6:	61bb      	str	r3, [r7, #24]
    if (remaining >= 4 && (write_address % 4 == 0)) {
 80011b8:	e01d      	b.n	80011f6 <Bootloader_WriteFlash+0x10e>
    } else {
      // Byte yazma (daha yavaş)
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, write_address, data[data_index]) != HAL_OK) {
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2200      	movs	r2, #0
 80011c6:	4698      	mov	r8, r3
 80011c8:	4691      	mov	r9, r2
 80011ca:	4642      	mov	r2, r8
 80011cc:	464b      	mov	r3, r9
 80011ce:	69f9      	ldr	r1, [r7, #28]
 80011d0:	2000      	movs	r0, #0
 80011d2:	f000 fc9d 	bl	8001b10 <HAL_FLASH_Program>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <Bootloader_WriteFlash+0xfc>
        HAL_FLASH_Lock();
 80011dc:	f000 fd0c 	bl	8001bf8 <HAL_FLASH_Lock>
        return 1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e00e      	b.n	8001202 <Bootloader_WriteFlash+0x11a>
      }
      write_address++;
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	3301      	adds	r3, #1
 80011e8:	61fb      	str	r3, [r7, #28]
      data_index++;
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
      remaining--;
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	61bb      	str	r3, [r7, #24]
  while (remaining > 0) {
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d19f      	bne.n	800113c <Bootloader_WriteFlash+0x54>
    }
  }

  HAL_FLASH_Lock();
 80011fc:	f000 fcfc 	bl	8001bf8 <HAL_FLASH_Lock>
  return 0; // Başarılı
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800120c:	08008000 	.word	0x08008000
 8001210:	0807ffff 	.word	0x0807ffff
 8001214:	08080000 	.word	0x08080000

08001218 <Bootloader_ReadFlash>:

/**
 * @brief Read data from flash memory
 */
uint8_t Bootloader_ReadFlash(uint32_t address, uint8_t *data, uint32_t size)
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  // Güvenlik kontrolü
  if (address < BOOTLOADER_START_ADDRESS || address >= 0x08080000)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800122a:	d303      	bcc.n	8001234 <Bootloader_ReadFlash+0x1c>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4a13      	ldr	r2, [pc, #76]	@ (800127c <Bootloader_ReadFlash+0x64>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <Bootloader_ReadFlash+0x20>
  {
    return 1; // Hata
 8001234:	2301      	movs	r3, #1
 8001236:	e01a      	b.n	800126e <Bootloader_ReadFlash+0x56>
  }

  if (size > 256)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800123e:	d901      	bls.n	8001244 <Bootloader_ReadFlash+0x2c>
  {
    return 1; // Çok büyük
 8001240:	2301      	movs	r3, #1
 8001242:	e014      	b.n	800126e <Bootloader_ReadFlash+0x56>
  }

  // Flash'tan direkt okuma
  uint8_t *flash_ptr = (uint8_t*)address;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 0; i < size; i++)
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e00a      	b.n	8001264 <Bootloader_ReadFlash+0x4c>
  {
    data[i] = flash_ptr[i];
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	441a      	add	r2, r3
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	440b      	add	r3, r1
 800125a:	7812      	ldrb	r2, [r2, #0]
 800125c:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < size; i++)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	d3f0      	bcc.n	800124e <Bootloader_ReadFlash+0x36>
  }

  return 0; // Başarılı
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	0807ffff 	.word	0x0807ffff

08001280 <Bootloader_CalculateChecksum>:

/**
 * @brief Calculate CRC32 checksum of flash memory region
 */
uint32_t Bootloader_CalculateChecksum(uint32_t start_address, uint32_t size)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t checksum = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  uint8_t *flash_ptr = (uint8_t*)start_address;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60fb      	str	r3, [r7, #12]

  // Güvenlik kontrolü
  if (start_address < BOOTLOADER_START_ADDRESS || start_address >= 0x08080000)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001298:	d303      	bcc.n	80012a2 <Bootloader_CalculateChecksum+0x22>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a18      	ldr	r2, [pc, #96]	@ (8001300 <Bootloader_CalculateChecksum+0x80>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d902      	bls.n	80012a8 <Bootloader_CalculateChecksum+0x28>
  {
    return 0xFFFFFFFF; // Hata göstergesi
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	e025      	b.n	80012f4 <Bootloader_CalculateChecksum+0x74>
  }

  if (start_address + size > 0x08080000)
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a15      	ldr	r2, [pc, #84]	@ (8001304 <Bootloader_CalculateChecksum+0x84>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d902      	bls.n	80012ba <Bootloader_CalculateChecksum+0x3a>
  {
    return 0xFFFFFFFF; // Hata göstergesi
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	e01c      	b.n	80012f4 <Bootloader_CalculateChecksum+0x74>
  }

  if (size == 0)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <Bootloader_CalculateChecksum+0x46>
  {
    return 0xFFFFFFFF; // Hata göstergesi
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	e016      	b.n	80012f4 <Bootloader_CalculateChecksum+0x74>
  }

  // XOR checksum (daha güvenilir)
  for (uint32_t i = 0; i < size; i++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	e00e      	b.n	80012ea <Bootloader_CalculateChecksum+0x6a>
  {
    checksum ^= flash_ptr[i];
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4413      	add	r3, r2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	4053      	eors	r3, r2
 80012da:	617b      	str	r3, [r7, #20]
    checksum = (checksum << 1) | (checksum >> 31); // Rotate left
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80012e2:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < size; i++)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	3301      	adds	r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3ec      	bcc.n	80012cc <Bootloader_CalculateChecksum+0x4c>
  }

  return checksum;
 80012f2:	697b      	ldr	r3, [r7, #20]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	0807ffff 	.word	0x0807ffff
 8001304:	08080000 	.word	0x08080000

08001308 <Buffer_Put>:
}


// Circular buffer fonksiyonları
void Buffer_Put(CircularBuffer_t *buf, uint8_t data)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
  buf->buffer[buf->head] = data;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 800131a:	4619      	mov	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	78fa      	ldrb	r2, [r7, #3]
 8001320:	545a      	strb	r2, [r3, r1]
  buf->head = (buf->head + 1) % UART_BUFFER_SIZE;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8001328:	3301      	adds	r3, #1
 800132a:	425a      	negs	r2, r3
 800132c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001334:	bf58      	it	pl
 8001336:	4253      	negpl	r3, r2
 8001338:	b29a      	uxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200

  if (buf->count < UART_BUFFER_SIZE) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8001346:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800134a:	d208      	bcs.n	800135e <Buffer_Put+0x56>
    buf->count++;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8001352:	3301      	adds	r3, #1
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
  } else {
    // Buffer full, overwrite oldest data
    buf->tail = (buf->tail + 1) % UART_BUFFER_SIZE;
  }
}
 800135c:	e00e      	b.n	800137c <Buffer_Put+0x74>
    buf->tail = (buf->tail + 1) % UART_BUFFER_SIZE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8001364:	3301      	adds	r3, #1
 8001366:	425a      	negs	r2, r3
 8001368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800136c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001370:	bf58      	it	pl
 8001372:	4253      	negpl	r3, r2
 8001374:	b29a      	uxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <Buffer_Get>:

uint8_t Buffer_Get(CircularBuffer_t *buf, uint8_t *data)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  if (buf->count == 0) {
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <Buffer_Get+0x18>
    return 0; // Buffer empty
 800139c:	2300      	movs	r3, #0
 800139e:	e01f      	b.n	80013e0 <Buffer_Get+0x58>
  }

  *data = buf->buffer[buf->tail];
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 80013a6:	461a      	mov	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	5c9a      	ldrb	r2, [r3, r2]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	701a      	strb	r2, [r3, #0]
  buf->tail = (buf->tail + 1) % UART_BUFFER_SIZE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 80013b6:	3301      	adds	r3, #1
 80013b8:	425a      	negs	r2, r3
 80013ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013c2:	bf58      	it	pl
 80013c4:	4253      	negpl	r3, r2
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
  buf->count--;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
  return 1; // Success
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <Buffer_Available>:

uint16_t Buffer_Available(CircularBuffer_t *buf)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  return buf->count;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <HAL_UART_RxCpltCallback>:
  return 1; // Success
}

// UART interrupt callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a08      	ldr	r2, [pc, #32]	@ (8001438 <HAL_UART_RxCpltCallback+0x30>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10a      	bne.n	8001430 <HAL_UART_RxCpltCallback+0x28>
    Buffer_Put(&uart_rx_buffer, uart_rx_byte);
 800141a:	4b08      	ldr	r3, [pc, #32]	@ (800143c <HAL_UART_RxCpltCallback+0x34>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	4619      	mov	r1, r3
 8001420:	4807      	ldr	r0, [pc, #28]	@ (8001440 <HAL_UART_RxCpltCallback+0x38>)
 8001422:	f7ff ff71 	bl	8001308 <Buffer_Put>
    // Start next reception
    HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8001426:	2201      	movs	r2, #1
 8001428:	4904      	ldr	r1, [pc, #16]	@ (800143c <HAL_UART_RxCpltCallback+0x34>)
 800142a:	4806      	ldr	r0, [pc, #24]	@ (8001444 <HAL_UART_RxCpltCallback+0x3c>)
 800142c:	f001 fec5 	bl	80031ba <HAL_UART_Receive_IT>
  }
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40004400 	.word	0x40004400
 800143c:	20000276 	.word	0x20000276
 8001440:	20000070 	.word	0x20000070
 8001444:	20000028 	.word	0x20000028

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <Error_Handler+0x8>

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <HAL_MspInit+0x4c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	4a0f      	ldr	r2, [pc, #60]	@ (80014a0 <HAL_MspInit+0x4c>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001468:	6453      	str	r3, [r2, #68]	@ 0x44
 800146a:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <HAL_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <HAL_MspInit+0x4c>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	@ 0x40
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001492:	2007      	movs	r0, #7
 8001494:	f000 fa68 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001538 <HAL_UART_MspInit+0x94>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d133      	bne.n	800152e <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <HAL_UART_MspInit+0x98>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	4a1b      	ldr	r2, [pc, #108]	@ (800153c <HAL_UART_MspInit+0x98>)
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <HAL_UART_MspInit+0x98>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <HAL_UART_MspInit+0x98>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a14      	ldr	r2, [pc, #80]	@ (800153c <HAL_UART_MspInit+0x98>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b12      	ldr	r3, [pc, #72]	@ (800153c <HAL_UART_MspInit+0x98>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014fe:	230c      	movs	r3, #12
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150e:	2307      	movs	r3, #7
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4809      	ldr	r0, [pc, #36]	@ (8001540 <HAL_UART_MspInit+0x9c>)
 800151a:	f000 fddd 	bl	80020d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2026      	movs	r0, #38	@ 0x26
 8001524:	f000 fa2b 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001528:	2026      	movs	r0, #38	@ 0x26
 800152a:	f000 fa44 	bl	80019b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	@ 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40004400 	.word	0x40004400
 800153c:	40023800 	.word	0x40023800
 8001540:	40020000 	.word	0x40020000

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <NMI_Handler+0x4>

0800154c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <MemManage_Handler+0x4>

0800155c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <UsageFault_Handler+0x4>

0800156c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159a:	f000 f8d1 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <USART2_IRQHandler+0x10>)
 80015aa:	f001 fe2b 	bl	8003204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000028 	.word	0x20000028

080015b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <SystemInit+0x20>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <SystemInit+0x20>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001614 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015e0:	f7ff ffea 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015e6:	490d      	ldr	r1, [pc, #52]	@ (800161c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001628 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800160a:	f002 fd6f 	bl	80040ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160e:	f7fe ff8f 	bl	8000530 <main>
  bx  lr    
 8001612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001620:	08004224 	.word	0x08004224
  ldr r2, =_sbss
 8001624:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001628:	2000029c 	.word	0x2000029c

0800162c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC_IRQHandler>
	...

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001634:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0d      	ldr	r2, [pc, #52]	@ (8001670 <HAL_Init+0x40>)
 800163a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800163e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <HAL_Init+0x40>)
 8001646:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800164a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	@ (8001670 <HAL_Init+0x40>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 f985 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165e:	2000      	movs	r0, #0
 8001660:	f000 f83e 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001664:	f7ff fef6 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023c00 	.word	0x40023c00

08001674 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_DeInit+0x4c>)
 800167a:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <HAL_DeInit+0x50>)
 800167c:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <HAL_DeInit+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <HAL_DeInit+0x4c>)
 8001686:	4a10      	ldr	r2, [pc, #64]	@ (80016c8 <HAL_DeInit+0x54>)
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800168a:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <HAL_DeInit+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001690:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <HAL_DeInit+0x4c>)
 8001692:	4a0e      	ldr	r2, [pc, #56]	@ (80016cc <HAL_DeInit+0x58>)
 8001694:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_DeInit+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <HAL_DeInit+0x4c>)
 800169e:	2281      	movs	r2, #129	@ 0x81
 80016a0:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80016a2:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <HAL_DeInit+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <HAL_DeInit+0x4c>)
 80016aa:	2203      	movs	r2, #3
 80016ac:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <HAL_DeInit+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80016b4:	f000 f80c 	bl	80016d0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	3fffc9ff 	.word	0x3fffc9ff
 80016c8:	00c77933 	.word	0x00c77933
 80016cc:	206010ff 	.word	0x206010ff

080016d0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f967 	bl	80019d2 <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f92f 	bl	800197e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	@ (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000000 	.word	0x20000000
 8001738:	20000008 	.word	0x20000008
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008
 8001764:	20000278 	.word	0x20000278

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000278 	.word	0x20000278

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000008 	.word	0x20000008

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	@ (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4907      	ldr	r1, [pc, #28]	@ (8001864 <__NVIC_EnableIRQ+0x38>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	@ (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	@ (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	@ 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
         );
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	@ 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001934:	d301      	bcc.n	800193a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001936:	2301      	movs	r3, #1
 8001938:	e00f      	b.n	800195a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <SysTick_Config+0x40>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001942:	210f      	movs	r1, #15
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f7ff ff8e 	bl	8001868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <SysTick_Config+0x40>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001952:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <SysTick_Config+0x40>)
 8001954:	2207      	movs	r2, #7
 8001956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	e000e010 	.word	0xe000e010

08001968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ff29 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001990:	f7ff ff3e 	bl	8001810 <__NVIC_GetPriorityGrouping>
 8001994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f7ff ff8e 	bl	80018bc <NVIC_EncodePriority>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff5d 	bl	8001868 <__NVIC_SetPriority>
}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff31 	bl	800182c <__NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffa2 	bl	8001924 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019f8:	f7ff feb6 	bl	8001768 <HAL_GetTick>
 80019fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d008      	beq.n	8001a1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2280      	movs	r2, #128	@ 0x80
 8001a0e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e052      	b.n	8001ac2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0216 	bic.w	r2, r2, #22
 8001a2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d103      	bne.n	8001a4c <HAL_DMA_Abort+0x62>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d007      	beq.n	8001a5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0208 	bic.w	r2, r2, #8
 8001a5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6c:	e013      	b.n	8001a96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a6e:	f7ff fe7b 	bl	8001768 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d90c      	bls.n	8001a96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2203      	movs	r2, #3
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e015      	b.n	8001ac2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1e4      	bne.n	8001a6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa8:	223f      	movs	r2, #63	@ 0x3f
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d004      	beq.n	8001ae8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2280      	movs	r2, #128	@ 0x80
 8001ae2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e00c      	b.n	8001b02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2205      	movs	r2, #5
 8001aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b1e:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <HAL_FLASH_Program+0x9c>)
 8001b20:	7e1b      	ldrb	r3, [r3, #24]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_FLASH_Program+0x1a>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e03b      	b.n	8001ba2 <HAL_FLASH_Program+0x92>
 8001b2a:	4b20      	ldr	r3, [pc, #128]	@ (8001bac <HAL_FLASH_Program+0x9c>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b30:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001b34:	f000 f870 	bl	8001c18 <FLASH_WaitForLastOperation>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d12b      	bne.n	8001b9a <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001b48:	783b      	ldrb	r3, [r7, #0]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	68b8      	ldr	r0, [r7, #8]
 8001b4e:	f000 f91b 	bl	8001d88 <FLASH_Program_Byte>
 8001b52:	e016      	b.n	8001b82 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d105      	bne.n	8001b66 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001b5a:	883b      	ldrh	r3, [r7, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	68b8      	ldr	r0, [r7, #8]
 8001b60:	f000 f8ee 	bl	8001d40 <FLASH_Program_HalfWord>
 8001b64:	e00d      	b.n	8001b82 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d105      	bne.n	8001b78 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	68b8      	ldr	r0, [r7, #8]
 8001b72:	f000 f8c3 	bl	8001cfc <FLASH_Program_Word>
 8001b76:	e004      	b.n	8001b82 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b7c:	68b8      	ldr	r0, [r7, #8]
 8001b7e:	f000 f88b 	bl	8001c98 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b82:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001b86:	f000 f847 	bl	8001c18 <FLASH_WaitForLastOperation>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001b8e:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <HAL_FLASH_Program+0xa0>)
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	4a07      	ldr	r2, [pc, #28]	@ (8001bb0 <HAL_FLASH_Program+0xa0>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b9a:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <HAL_FLASH_Program+0x9c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	761a      	strb	r2, [r3, #24]

  return status;
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000027c 	.word	0x2000027c
 8001bb0:	40023c00 	.word	0x40023c00

08001bb4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <HAL_FLASH_Unlock+0x38>)
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da0b      	bge.n	8001bde <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <HAL_FLASH_Unlock+0x38>)
 8001bc8:	4a09      	ldr	r2, [pc, #36]	@ (8001bf0 <HAL_FLASH_Unlock+0x3c>)
 8001bca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001bcc:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <HAL_FLASH_Unlock+0x38>)
 8001bce:	4a09      	ldr	r2, [pc, #36]	@ (8001bf4 <HAL_FLASH_Unlock+0x40>)
 8001bd0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_FLASH_Unlock+0x38>)
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da01      	bge.n	8001bde <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001bde:	79fb      	ldrb	r3, [r7, #7]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40023c00 	.word	0x40023c00
 8001bf0:	45670123 	.word	0x45670123
 8001bf4:	cdef89ab 	.word	0xcdef89ab

08001bf8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_FLASH_Lock+0x1c>)
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <HAL_FLASH_Lock+0x1c>)
 8001c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c06:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40023c00 	.word	0x40023c00

08001c18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c24:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <FLASH_WaitForLastOperation+0x78>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c2a:	f7ff fd9d 	bl	8001768 <HAL_GetTick>
 8001c2e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001c30:	e010      	b.n	8001c54 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c38:	d00c      	beq.n	8001c54 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <FLASH_WaitForLastOperation+0x38>
 8001c40:	f7ff fd92 	bl	8001768 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d201      	bcs.n	8001c54 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e019      	b.n	8001c88 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001c54:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <FLASH_WaitForLastOperation+0x7c>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e8      	bne.n	8001c32 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <FLASH_WaitForLastOperation+0x7c>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <FLASH_WaitForLastOperation+0x7c>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <FLASH_WaitForLastOperation+0x7c>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001c7e:	f000 f8a5 	bl	8001dcc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0

}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000027c 	.word	0x2000027c
 8001c94:	40023c00 	.word	0x40023c00

08001c98 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ca4:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <FLASH_Program_DoubleWord+0x60>)
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	4a13      	ldr	r2, [pc, #76]	@ (8001cf8 <FLASH_Program_DoubleWord+0x60>)
 8001caa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <FLASH_Program_DoubleWord+0x60>)
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	4a10      	ldr	r2, [pc, #64]	@ (8001cf8 <FLASH_Program_DoubleWord+0x60>)
 8001cb6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001cba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <FLASH_Program_DoubleWord+0x60>)
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf8 <FLASH_Program_DoubleWord+0x60>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001cce:	f3bf 8f6f 	isb	sy
}
 8001cd2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001cd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	000a      	movs	r2, r1
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	3104      	adds	r1, #4
 8001ce8:	4613      	mov	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d06:	4b0d      	ldr	r3, [pc, #52]	@ (8001d3c <FLASH_Program_Word+0x40>)
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d3c <FLASH_Program_Word+0x40>)
 8001d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001d12:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <FLASH_Program_Word+0x40>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	4a09      	ldr	r2, [pc, #36]	@ (8001d3c <FLASH_Program_Word+0x40>)
 8001d18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	@ (8001d3c <FLASH_Program_Word+0x40>)
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	4a06      	ldr	r2, [pc, #24]	@ (8001d3c <FLASH_Program_Word+0x40>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	601a      	str	r2, [r3, #0]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	40023c00 	.word	0x40023c00

08001d40 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <FLASH_Program_HalfWord+0x44>)
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	4a0c      	ldr	r2, [pc, #48]	@ (8001d84 <FLASH_Program_HalfWord+0x44>)
 8001d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <FLASH_Program_HalfWord+0x44>)
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <FLASH_Program_HalfWord+0x44>)
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d64:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <FLASH_Program_HalfWord+0x44>)
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	4a06      	ldr	r2, [pc, #24]	@ (8001d84 <FLASH_Program_HalfWord+0x44>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	801a      	strh	r2, [r3, #0]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023c00 	.word	0x40023c00

08001d88 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <FLASH_Program_Byte+0x40>)
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc8 <FLASH_Program_Byte+0x40>)
 8001d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001da0:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <FLASH_Program_Byte+0x40>)
 8001da2:	4a09      	ldr	r2, [pc, #36]	@ (8001dc8 <FLASH_Program_Byte+0x40>)
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001da8:	4b07      	ldr	r3, [pc, #28]	@ (8001dc8 <FLASH_Program_Byte+0x40>)
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	4a06      	ldr	r2, [pc, #24]	@ (8001dc8 <FLASH_Program_Byte+0x40>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	701a      	strb	r2, [r3, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40023c00 	.word	0x40023c00

08001dcc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001e90 <FLASH_SetErrorCode+0xc4>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e94 <FLASH_SetErrorCode+0xc8>)
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	f043 0310 	orr.w	r3, r3, #16
 8001de4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e94 <FLASH_SetErrorCode+0xc8>)
 8001de6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001de8:	4b29      	ldr	r3, [pc, #164]	@ (8001e90 <FLASH_SetErrorCode+0xc4>)
 8001dea:	2210      	movs	r2, #16
 8001dec:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001dee:	4b28      	ldr	r3, [pc, #160]	@ (8001e90 <FLASH_SetErrorCode+0xc4>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d008      	beq.n	8001e0c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001dfa:	4b26      	ldr	r3, [pc, #152]	@ (8001e94 <FLASH_SetErrorCode+0xc8>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	4a24      	ldr	r2, [pc, #144]	@ (8001e94 <FLASH_SetErrorCode+0xc8>)
 8001e04:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001e06:	4b22      	ldr	r3, [pc, #136]	@ (8001e90 <FLASH_SetErrorCode+0xc4>)
 8001e08:	2220      	movs	r2, #32
 8001e0a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001e0c:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <FLASH_SetErrorCode+0xc4>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001e18:	4b1e      	ldr	r3, [pc, #120]	@ (8001e94 <FLASH_SetErrorCode+0xc8>)
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	4a1c      	ldr	r2, [pc, #112]	@ (8001e94 <FLASH_SetErrorCode+0xc8>)
 8001e22:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <FLASH_SetErrorCode+0xc4>)
 8001e26:	2240      	movs	r2, #64	@ 0x40
 8001e28:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001e2a:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <FLASH_SetErrorCode+0xc4>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001e36:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <FLASH_SetErrorCode+0xc8>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f043 0302 	orr.w	r3, r3, #2
 8001e3e:	4a15      	ldr	r2, [pc, #84]	@ (8001e94 <FLASH_SetErrorCode+0xc8>)
 8001e40:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <FLASH_SetErrorCode+0xc4>)
 8001e44:	2280      	movs	r2, #128	@ 0x80
 8001e46:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <FLASH_SetErrorCode+0xc4>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d009      	beq.n	8001e68 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <FLASH_SetErrorCode+0xc8>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e94 <FLASH_SetErrorCode+0xc8>)
 8001e5e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <FLASH_SetErrorCode+0xc4>)
 8001e62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e66:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <FLASH_SetErrorCode+0xc4>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001e74:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <FLASH_SetErrorCode+0xc8>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	f043 0320 	orr.w	r3, r3, #32
 8001e7c:	4a05      	ldr	r2, [pc, #20]	@ (8001e94 <FLASH_SetErrorCode+0xc8>)
 8001e7e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <FLASH_SetErrorCode+0xc4>)
 8001e82:	2202      	movs	r2, #2
 8001e84:	60da      	str	r2, [r3, #12]
  }
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	40023c00 	.word	0x40023c00
 8001e94:	2000027c 	.word	0x2000027c

08001e98 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ea6:	4b31      	ldr	r3, [pc, #196]	@ (8001f6c <HAL_FLASHEx_Erase+0xd4>)
 8001ea8:	7e1b      	ldrb	r3, [r3, #24]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_FLASHEx_Erase+0x1a>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e058      	b.n	8001f64 <HAL_FLASHEx_Erase+0xcc>
 8001eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f6c <HAL_FLASHEx_Erase+0xd4>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001eb8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ebc:	f7ff feac 	bl	8001c18 <FLASH_WaitForLastOperation>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d148      	bne.n	8001f5c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d115      	bne.n	8001f06 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f000 f844 	bl	8001f74 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001eec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ef0:	f7ff fe92 	bl	8001c18 <FLASH_WaitForLastOperation>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <HAL_FLASHEx_Erase+0xd8>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a1c      	ldr	r2, [pc, #112]	@ (8001f70 <HAL_FLASHEx_Erase+0xd8>)
 8001efe:	f023 0304 	bic.w	r3, r3, #4
 8001f02:	6113      	str	r3, [r2, #16]
 8001f04:	e028      	b.n	8001f58 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	e01c      	b.n	8001f48 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	68b8      	ldr	r0, [r7, #8]
 8001f18:	f000 f850 	bl	8001fbc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f1c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001f20:	f7ff fe7a 	bl	8001c18 <FLASH_WaitForLastOperation>
 8001f24:	4603      	mov	r3, r0
 8001f26:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <HAL_FLASHEx_Erase+0xd8>)
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	4a10      	ldr	r2, [pc, #64]	@ (8001f70 <HAL_FLASHEx_Erase+0xd8>)
 8001f2e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001f32:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	601a      	str	r2, [r3, #0]
          break;
 8001f40:	e00a      	b.n	8001f58 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3301      	adds	r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4413      	add	r3, r2
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d3da      	bcc.n	8001f0e <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001f58:	f000 f878 	bl	800204c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <HAL_FLASHEx_Erase+0xd4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	761a      	strb	r2, [r3, #24]

  return status;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	2000027c 	.word	0x2000027c
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f80:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb8 <FLASH_MassErase+0x44>)
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb8 <FLASH_MassErase+0x44>)
 8001f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <FLASH_MassErase+0x44>)
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	4a09      	ldr	r2, [pc, #36]	@ (8001fb8 <FLASH_MassErase+0x44>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001f98:	4b07      	ldr	r3, [pc, #28]	@ (8001fb8 <FLASH_MassErase+0x44>)
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	4a05      	ldr	r2, [pc, #20]	@ (8001fb8 <FLASH_MassErase+0x44>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa8:	6113      	str	r3, [r2, #16]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	e010      	b.n	8001ffa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d103      	bne.n	8001fe6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001fde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e009      	b.n	8001ffa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d103      	bne.n	8001ff4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001fec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	e002      	b.n	8001ffa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ff4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ff8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ffa:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <FLASH_Erase_Sector+0x8c>)
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <FLASH_Erase_Sector+0x8c>)
 8002000:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002004:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <FLASH_Erase_Sector+0x8c>)
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	490f      	ldr	r1, [pc, #60]	@ (8002048 <FLASH_Erase_Sector+0x8c>)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002012:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <FLASH_Erase_Sector+0x8c>)
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	4a0c      	ldr	r2, [pc, #48]	@ (8002048 <FLASH_Erase_Sector+0x8c>)
 8002018:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800201c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <FLASH_Erase_Sector+0x8c>)
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4313      	orrs	r3, r2
 8002028:	4a07      	ldr	r2, [pc, #28]	@ (8002048 <FLASH_Erase_Sector+0x8c>)
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <FLASH_Erase_Sector+0x8c>)
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <FLASH_Erase_Sector+0x8c>)
 8002036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203a:	6113      	str	r3, [r2, #16]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	40023c00 	.word	0x40023c00

0800204c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002050:	4b20      	ldr	r3, [pc, #128]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002058:	2b00      	cmp	r3, #0
 800205a:	d017      	beq.n	800208c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800205c:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 8002062:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002066:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002068:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a19      	ldr	r2, [pc, #100]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 800206e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b17      	ldr	r3, [pc, #92]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a16      	ldr	r2, [pc, #88]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 800207a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800207e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002080:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a13      	ldr	r2, [pc, #76]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 8002086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800208a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800208c:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002094:	2b00      	cmp	r3, #0
 8002096:	d017      	beq.n	80020c8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002098:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0d      	ldr	r2, [pc, #52]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 800209e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80020a2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0a      	ldr	r2, [pc, #40]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 80020aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a07      	ldr	r2, [pc, #28]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 80020b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020ba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80020bc:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <FLASH_FlushCaches+0x88>)
 80020c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020c6:	6013      	str	r3, [r2, #0]
  }
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40023c00 	.word	0x40023c00

080020d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	@ 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	e165      	b.n	80023c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020f4:	2201      	movs	r2, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	f040 8154 	bne.w	80023ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d005      	beq.n	800212a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002126:	2b02      	cmp	r3, #2
 8002128:	d130      	bne.n	800218c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002160:	2201      	movs	r2, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 0201 	and.w	r2, r3, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b03      	cmp	r3, #3
 8002196:	d017      	beq.n	80021c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d123      	bne.n	800221c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	220f      	movs	r2, #15
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	08da      	lsrs	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3208      	adds	r2, #8
 8002216:	69b9      	ldr	r1, [r7, #24]
 8002218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0203 	and.w	r2, r3, #3
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80ae 	beq.w	80023ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	4b5d      	ldr	r3, [pc, #372]	@ (80023d8 <HAL_GPIO_Init+0x300>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	4a5c      	ldr	r2, [pc, #368]	@ (80023d8 <HAL_GPIO_Init+0x300>)
 8002268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800226c:	6453      	str	r3, [r2, #68]	@ 0x44
 800226e:	4b5a      	ldr	r3, [pc, #360]	@ (80023d8 <HAL_GPIO_Init+0x300>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800227a:	4a58      	ldr	r2, [pc, #352]	@ (80023dc <HAL_GPIO_Init+0x304>)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4f      	ldr	r2, [pc, #316]	@ (80023e0 <HAL_GPIO_Init+0x308>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d025      	beq.n	80022f2 <HAL_GPIO_Init+0x21a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4e      	ldr	r2, [pc, #312]	@ (80023e4 <HAL_GPIO_Init+0x30c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01f      	beq.n	80022ee <HAL_GPIO_Init+0x216>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4d      	ldr	r2, [pc, #308]	@ (80023e8 <HAL_GPIO_Init+0x310>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d019      	beq.n	80022ea <HAL_GPIO_Init+0x212>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4c      	ldr	r2, [pc, #304]	@ (80023ec <HAL_GPIO_Init+0x314>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_GPIO_Init+0x20e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4b      	ldr	r2, [pc, #300]	@ (80023f0 <HAL_GPIO_Init+0x318>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00d      	beq.n	80022e2 <HAL_GPIO_Init+0x20a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4a      	ldr	r2, [pc, #296]	@ (80023f4 <HAL_GPIO_Init+0x31c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d007      	beq.n	80022de <HAL_GPIO_Init+0x206>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a49      	ldr	r2, [pc, #292]	@ (80023f8 <HAL_GPIO_Init+0x320>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_GPIO_Init+0x202>
 80022d6:	2306      	movs	r3, #6
 80022d8:	e00c      	b.n	80022f4 <HAL_GPIO_Init+0x21c>
 80022da:	2307      	movs	r3, #7
 80022dc:	e00a      	b.n	80022f4 <HAL_GPIO_Init+0x21c>
 80022de:	2305      	movs	r3, #5
 80022e0:	e008      	b.n	80022f4 <HAL_GPIO_Init+0x21c>
 80022e2:	2304      	movs	r3, #4
 80022e4:	e006      	b.n	80022f4 <HAL_GPIO_Init+0x21c>
 80022e6:	2303      	movs	r3, #3
 80022e8:	e004      	b.n	80022f4 <HAL_GPIO_Init+0x21c>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e002      	b.n	80022f4 <HAL_GPIO_Init+0x21c>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_GPIO_Init+0x21c>
 80022f2:	2300      	movs	r3, #0
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	f002 0203 	and.w	r2, r2, #3
 80022fa:	0092      	lsls	r2, r2, #2
 80022fc:	4093      	lsls	r3, r2
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002304:	4935      	ldr	r1, [pc, #212]	@ (80023dc <HAL_GPIO_Init+0x304>)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	089b      	lsrs	r3, r3, #2
 800230a:	3302      	adds	r3, #2
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002312:	4b3a      	ldr	r3, [pc, #232]	@ (80023fc <HAL_GPIO_Init+0x324>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002336:	4a31      	ldr	r2, [pc, #196]	@ (80023fc <HAL_GPIO_Init+0x324>)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800233c:	4b2f      	ldr	r3, [pc, #188]	@ (80023fc <HAL_GPIO_Init+0x324>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002360:	4a26      	ldr	r2, [pc, #152]	@ (80023fc <HAL_GPIO_Init+0x324>)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002366:	4b25      	ldr	r3, [pc, #148]	@ (80023fc <HAL_GPIO_Init+0x324>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800238a:	4a1c      	ldr	r2, [pc, #112]	@ (80023fc <HAL_GPIO_Init+0x324>)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002390:	4b1a      	ldr	r3, [pc, #104]	@ (80023fc <HAL_GPIO_Init+0x324>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b4:	4a11      	ldr	r2, [pc, #68]	@ (80023fc <HAL_GPIO_Init+0x324>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3301      	adds	r3, #1
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2b0f      	cmp	r3, #15
 80023c4:	f67f ae96 	bls.w	80020f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3724      	adds	r7, #36	@ 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40013800 	.word	0x40013800
 80023e0:	40020000 	.word	0x40020000
 80023e4:	40020400 	.word	0x40020400
 80023e8:	40020800 	.word	0x40020800
 80023ec:	40020c00 	.word	0x40020c00
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40021400 	.word	0x40021400
 80023f8:	40021800 	.word	0x40021800
 80023fc:	40013c00 	.word	0x40013c00

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800241c:	e003      	b.n	8002426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800241e:	887b      	ldrh	r3, [r7, #2]
 8002420:	041a      	lsls	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	619a      	str	r2, [r3, #24]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0cc      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002448:	4b68      	ldr	r3, [pc, #416]	@ (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d90c      	bls.n	8002470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b65      	ldr	r3, [pc, #404]	@ (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b63      	ldr	r3, [pc, #396]	@ (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0b8      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002488:	4b59      	ldr	r3, [pc, #356]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a58      	ldr	r2, [pc, #352]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002492:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a0:	4b53      	ldr	r3, [pc, #332]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a52      	ldr	r2, [pc, #328]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b50      	ldr	r3, [pc, #320]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	494d      	ldr	r1, [pc, #308]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d044      	beq.n	8002554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b47      	ldr	r3, [pc, #284]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d119      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e07f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d003      	beq.n	80024f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f2:	4b3f      	ldr	r3, [pc, #252]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d109      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002502:	4b3b      	ldr	r3, [pc, #236]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e067      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002512:	4b37      	ldr	r3, [pc, #220]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f023 0203 	bic.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4934      	ldr	r1, [pc, #208]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	4313      	orrs	r3, r2
 8002522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002524:	f7ff f920 	bl	8001768 <HAL_GetTick>
 8002528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	e00a      	b.n	8002542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f7ff f91c 	bl	8001768 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e04f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	4b2b      	ldr	r3, [pc, #172]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 020c 	and.w	r2, r3, #12
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	429a      	cmp	r2, r3
 8002552:	d1eb      	bne.n	800252c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002554:	4b25      	ldr	r3, [pc, #148]	@ (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d20c      	bcs.n	800257c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b22      	ldr	r3, [pc, #136]	@ (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b20      	ldr	r3, [pc, #128]	@ (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e032      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002588:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4916      	ldr	r1, [pc, #88]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a6:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	490e      	ldr	r1, [pc, #56]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ba:	f000 f855 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 80025be:	4602      	mov	r2, r0
 80025c0:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	490a      	ldr	r1, [pc, #40]	@ (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	5ccb      	ldrb	r3, [r1, r3]
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	4a09      	ldr	r2, [pc, #36]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025d6:	4b09      	ldr	r3, [pc, #36]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff f880 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023c00 	.word	0x40023c00
 80025f0:	40023800 	.word	0x40023800
 80025f4:	080041fc 	.word	0x080041fc
 80025f8:	20000000 	.word	0x20000000
 80025fc:	20000004 	.word	0x20000004

08002600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_RCC_GetHCLKFreq+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000000 	.word	0x20000000

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800261c:	f7ff fff0 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0a9b      	lsrs	r3, r3, #10
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	@ (800263c <HAL_RCC_GetPCLK1Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	0800420c 	.word	0x0800420c

08002640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002644:	f7ff ffdc 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0b5b      	lsrs	r3, r3, #13
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4903      	ldr	r1, [pc, #12]	@ (8002664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	0800420c 	.word	0x0800420c

08002668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800266c:	b0ae      	sub	sp, #184	@ 0xb8
 800266e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800268e:	4bcb      	ldr	r3, [pc, #812]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b0c      	cmp	r3, #12
 8002698:	f200 8206 	bhi.w	8002aa8 <HAL_RCC_GetSysClockFreq+0x440>
 800269c:	a201      	add	r2, pc, #4	@ (adr r2, 80026a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800269e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a2:	bf00      	nop
 80026a4:	080026d9 	.word	0x080026d9
 80026a8:	08002aa9 	.word	0x08002aa9
 80026ac:	08002aa9 	.word	0x08002aa9
 80026b0:	08002aa9 	.word	0x08002aa9
 80026b4:	080026e1 	.word	0x080026e1
 80026b8:	08002aa9 	.word	0x08002aa9
 80026bc:	08002aa9 	.word	0x08002aa9
 80026c0:	08002aa9 	.word	0x08002aa9
 80026c4:	080026e9 	.word	0x080026e9
 80026c8:	08002aa9 	.word	0x08002aa9
 80026cc:	08002aa9 	.word	0x08002aa9
 80026d0:	08002aa9 	.word	0x08002aa9
 80026d4:	080028d9 	.word	0x080028d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026d8:	4bb9      	ldr	r3, [pc, #740]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80026da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026de:	e1e7      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026e0:	4bb8      	ldr	r3, [pc, #736]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80026e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026e6:	e1e3      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e8:	4bb4      	ldr	r3, [pc, #720]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x354>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026f4:	4bb1      	ldr	r3, [pc, #708]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x354>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d071      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002700:	4bae      	ldr	r3, [pc, #696]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	2200      	movs	r2, #0
 8002708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800270c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002710:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002718:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002722:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002726:	4622      	mov	r2, r4
 8002728:	462b      	mov	r3, r5
 800272a:	f04f 0000 	mov.w	r0, #0
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	0159      	lsls	r1, r3, #5
 8002734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002738:	0150      	lsls	r0, r2, #5
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4621      	mov	r1, r4
 8002740:	1a51      	subs	r1, r2, r1
 8002742:	6439      	str	r1, [r7, #64]	@ 0x40
 8002744:	4629      	mov	r1, r5
 8002746:	eb63 0301 	sbc.w	r3, r3, r1
 800274a:	647b      	str	r3, [r7, #68]	@ 0x44
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002758:	4649      	mov	r1, r9
 800275a:	018b      	lsls	r3, r1, #6
 800275c:	4641      	mov	r1, r8
 800275e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002762:	4641      	mov	r1, r8
 8002764:	018a      	lsls	r2, r1, #6
 8002766:	4641      	mov	r1, r8
 8002768:	1a51      	subs	r1, r2, r1
 800276a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800276c:	4649      	mov	r1, r9
 800276e:	eb63 0301 	sbc.w	r3, r3, r1
 8002772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002780:	4649      	mov	r1, r9
 8002782:	00cb      	lsls	r3, r1, #3
 8002784:	4641      	mov	r1, r8
 8002786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800278a:	4641      	mov	r1, r8
 800278c:	00ca      	lsls	r2, r1, #3
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	4603      	mov	r3, r0
 8002794:	4622      	mov	r2, r4
 8002796:	189b      	adds	r3, r3, r2
 8002798:	633b      	str	r3, [r7, #48]	@ 0x30
 800279a:	462b      	mov	r3, r5
 800279c:	460a      	mov	r2, r1
 800279e:	eb42 0303 	adc.w	r3, r2, r3
 80027a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027b0:	4629      	mov	r1, r5
 80027b2:	024b      	lsls	r3, r1, #9
 80027b4:	4621      	mov	r1, r4
 80027b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ba:	4621      	mov	r1, r4
 80027bc:	024a      	lsls	r2, r1, #9
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027c6:	2200      	movs	r2, #0
 80027c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80027d4:	f7fd fd16 	bl	8000204 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4613      	mov	r3, r2
 80027de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027e2:	e067      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e4:	4b75      	ldr	r3, [pc, #468]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x354>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	099b      	lsrs	r3, r3, #6
 80027ea:	2200      	movs	r2, #0
 80027ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027f0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80027f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027fe:	2300      	movs	r3, #0
 8002800:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002802:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002806:	4622      	mov	r2, r4
 8002808:	462b      	mov	r3, r5
 800280a:	f04f 0000 	mov.w	r0, #0
 800280e:	f04f 0100 	mov.w	r1, #0
 8002812:	0159      	lsls	r1, r3, #5
 8002814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002818:	0150      	lsls	r0, r2, #5
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4621      	mov	r1, r4
 8002820:	1a51      	subs	r1, r2, r1
 8002822:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002824:	4629      	mov	r1, r5
 8002826:	eb63 0301 	sbc.w	r3, r3, r1
 800282a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002838:	4649      	mov	r1, r9
 800283a:	018b      	lsls	r3, r1, #6
 800283c:	4641      	mov	r1, r8
 800283e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002842:	4641      	mov	r1, r8
 8002844:	018a      	lsls	r2, r1, #6
 8002846:	4641      	mov	r1, r8
 8002848:	ebb2 0a01 	subs.w	sl, r2, r1
 800284c:	4649      	mov	r1, r9
 800284e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800285e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002862:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002866:	4692      	mov	sl, r2
 8002868:	469b      	mov	fp, r3
 800286a:	4623      	mov	r3, r4
 800286c:	eb1a 0303 	adds.w	r3, sl, r3
 8002870:	623b      	str	r3, [r7, #32]
 8002872:	462b      	mov	r3, r5
 8002874:	eb4b 0303 	adc.w	r3, fp, r3
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002886:	4629      	mov	r1, r5
 8002888:	028b      	lsls	r3, r1, #10
 800288a:	4621      	mov	r1, r4
 800288c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002890:	4621      	mov	r1, r4
 8002892:	028a      	lsls	r2, r1, #10
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800289c:	2200      	movs	r2, #0
 800289e:	673b      	str	r3, [r7, #112]	@ 0x70
 80028a0:	677a      	str	r2, [r7, #116]	@ 0x74
 80028a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80028a6:	f7fd fcad 	bl	8000204 <__aeabi_uldivmod>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4613      	mov	r3, r2
 80028b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028b4:	4b41      	ldr	r3, [pc, #260]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x354>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	3301      	adds	r3, #1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80028c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028d6:	e0eb      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d8:	4b38      	ldr	r3, [pc, #224]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x354>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e4:	4b35      	ldr	r3, [pc, #212]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x354>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d06b      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f0:	4b32      	ldr	r3, [pc, #200]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x354>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	099b      	lsrs	r3, r3, #6
 80028f6:	2200      	movs	r2, #0
 80028f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80028fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002902:	663b      	str	r3, [r7, #96]	@ 0x60
 8002904:	2300      	movs	r3, #0
 8002906:	667b      	str	r3, [r7, #100]	@ 0x64
 8002908:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800290c:	4622      	mov	r2, r4
 800290e:	462b      	mov	r3, r5
 8002910:	f04f 0000 	mov.w	r0, #0
 8002914:	f04f 0100 	mov.w	r1, #0
 8002918:	0159      	lsls	r1, r3, #5
 800291a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800291e:	0150      	lsls	r0, r2, #5
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4621      	mov	r1, r4
 8002926:	1a51      	subs	r1, r2, r1
 8002928:	61b9      	str	r1, [r7, #24]
 800292a:	4629      	mov	r1, r5
 800292c:	eb63 0301 	sbc.w	r3, r3, r1
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800293e:	4659      	mov	r1, fp
 8002940:	018b      	lsls	r3, r1, #6
 8002942:	4651      	mov	r1, sl
 8002944:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002948:	4651      	mov	r1, sl
 800294a:	018a      	lsls	r2, r1, #6
 800294c:	4651      	mov	r1, sl
 800294e:	ebb2 0801 	subs.w	r8, r2, r1
 8002952:	4659      	mov	r1, fp
 8002954:	eb63 0901 	sbc.w	r9, r3, r1
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002964:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002968:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800296c:	4690      	mov	r8, r2
 800296e:	4699      	mov	r9, r3
 8002970:	4623      	mov	r3, r4
 8002972:	eb18 0303 	adds.w	r3, r8, r3
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	462b      	mov	r3, r5
 800297a:	eb49 0303 	adc.w	r3, r9, r3
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800298c:	4629      	mov	r1, r5
 800298e:	024b      	lsls	r3, r1, #9
 8002990:	4621      	mov	r1, r4
 8002992:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002996:	4621      	mov	r1, r4
 8002998:	024a      	lsls	r2, r1, #9
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029a2:	2200      	movs	r2, #0
 80029a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80029a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029ac:	f7fd fc2a 	bl	8000204 <__aeabi_uldivmod>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4613      	mov	r3, r2
 80029b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029ba:	e065      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x420>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x458>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	2200      	movs	r2, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	4611      	mov	r1, r2
 80029d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80029da:	2300      	movs	r3, #0
 80029dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80029de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80029e2:	4642      	mov	r2, r8
 80029e4:	464b      	mov	r3, r9
 80029e6:	f04f 0000 	mov.w	r0, #0
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	0159      	lsls	r1, r3, #5
 80029f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f4:	0150      	lsls	r0, r2, #5
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4641      	mov	r1, r8
 80029fc:	1a51      	subs	r1, r2, r1
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	4649      	mov	r1, r9
 8002a02:	eb63 0301 	sbc.w	r3, r3, r1
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a14:	4659      	mov	r1, fp
 8002a16:	018b      	lsls	r3, r1, #6
 8002a18:	4651      	mov	r1, sl
 8002a1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a1e:	4651      	mov	r1, sl
 8002a20:	018a      	lsls	r2, r1, #6
 8002a22:	4651      	mov	r1, sl
 8002a24:	1a54      	subs	r4, r2, r1
 8002a26:	4659      	mov	r1, fp
 8002a28:	eb63 0501 	sbc.w	r5, r3, r1
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	00eb      	lsls	r3, r5, #3
 8002a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a3a:	00e2      	lsls	r2, r4, #3
 8002a3c:	4614      	mov	r4, r2
 8002a3e:	461d      	mov	r5, r3
 8002a40:	4643      	mov	r3, r8
 8002a42:	18e3      	adds	r3, r4, r3
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	464b      	mov	r3, r9
 8002a48:	eb45 0303 	adc.w	r3, r5, r3
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	028b      	lsls	r3, r1, #10
 8002a5e:	4621      	mov	r1, r4
 8002a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a64:	4621      	mov	r1, r4
 8002a66:	028a      	lsls	r2, r1, #10
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a70:	2200      	movs	r2, #0
 8002a72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a74:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002a76:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a7a:	f7fd fbc3 	bl	8000204 <__aeabi_uldivmod>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4613      	mov	r3, r2
 8002a84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a88:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	0f1b      	lsrs	r3, r3, #28
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002aa6:	e003      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002aae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	37b8      	adds	r7, #184	@ 0xb8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	00f42400 	.word	0x00f42400

08002ac8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e28d      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 8083 	beq.w	8002bee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ae8:	4b94      	ldr	r3, [pc, #592]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d019      	beq.n	8002b28 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002af4:	4b91      	ldr	r3, [pc, #580]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 030c 	and.w	r3, r3, #12
        || \
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b00:	4b8e      	ldr	r3, [pc, #568]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b0c:	d00c      	beq.n	8002b28 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b16:	2b0c      	cmp	r3, #12
 8002b18:	d112      	bne.n	8002b40 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b1a:	4b88      	ldr	r3, [pc, #544]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b26:	d10b      	bne.n	8002b40 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	4b84      	ldr	r3, [pc, #528]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d05b      	beq.n	8002bec <HAL_RCC_OscConfig+0x124>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d157      	bne.n	8002bec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e25a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b48:	d106      	bne.n	8002b58 <HAL_RCC_OscConfig+0x90>
 8002b4a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7b      	ldr	r2, [pc, #492]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e01d      	b.n	8002b94 <HAL_RCC_OscConfig+0xcc>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0xb4>
 8002b62:	4b76      	ldr	r3, [pc, #472]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a75      	ldr	r2, [pc, #468]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b73      	ldr	r3, [pc, #460]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a72      	ldr	r2, [pc, #456]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCC_OscConfig+0xcc>
 8002b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a6e      	ldr	r2, [pc, #440]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b6c      	ldr	r3, [pc, #432]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a6b      	ldr	r2, [pc, #428]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fde4 	bl	8001768 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7fe fde0 	bl	8001768 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	@ 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e21f      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b61      	ldr	r3, [pc, #388]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0xdc>
 8002bc2:	e014      	b.n	8002bee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fdd0 	bl	8001768 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7fe fdcc 	bl	8001768 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	@ 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e20b      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	4b57      	ldr	r3, [pc, #348]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x104>
 8002bea:	e000      	b.n	8002bee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d06f      	beq.n	8002cda <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bfa:	4b50      	ldr	r3, [pc, #320]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d017      	beq.n	8002c36 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c06:	4b4d      	ldr	r3, [pc, #308]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d105      	bne.n	8002c1e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c12:	4b4a      	ldr	r3, [pc, #296]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00b      	beq.n	8002c36 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1e:	4b47      	ldr	r3, [pc, #284]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d11c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c2a:	4b44      	ldr	r3, [pc, #272]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d116      	bne.n	8002c64 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c36:	4b41      	ldr	r3, [pc, #260]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_RCC_OscConfig+0x186>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d001      	beq.n	8002c4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e1d3      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4937      	ldr	r1, [pc, #220]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c62:	e03a      	b.n	8002cda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d020      	beq.n	8002cae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c6c:	4b34      	ldr	r3, [pc, #208]	@ (8002d40 <HAL_RCC_OscConfig+0x278>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c72:	f7fe fd79 	bl	8001768 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c7a:	f7fe fd75 	bl	8001768 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e1b4      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c98:	4b28      	ldr	r3, [pc, #160]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4925      	ldr	r1, [pc, #148]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]
 8002cac:	e015      	b.n	8002cda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cae:	4b24      	ldr	r3, [pc, #144]	@ (8002d40 <HAL_RCC_OscConfig+0x278>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fd58 	bl	8001768 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fd54 	bl	8001768 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e193      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cce:	4b1b      	ldr	r3, [pc, #108]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d036      	beq.n	8002d54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d016      	beq.n	8002d1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cee:	4b15      	ldr	r3, [pc, #84]	@ (8002d44 <HAL_RCC_OscConfig+0x27c>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf4:	f7fe fd38 	bl	8001768 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cfc:	f7fe fd34 	bl	8001768 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e173      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x234>
 8002d1a:	e01b      	b.n	8002d54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1c:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <HAL_RCC_OscConfig+0x27c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fe fd21 	bl	8001768 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d28:	e00e      	b.n	8002d48 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fd1d 	bl	8001768 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d907      	bls.n	8002d48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e15c      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	42470000 	.word	0x42470000
 8002d44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d48:	4b8a      	ldr	r3, [pc, #552]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002d4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ea      	bne.n	8002d2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8097 	beq.w	8002e90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d66:	4b83      	ldr	r3, [pc, #524]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10f      	bne.n	8002d92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	4b7f      	ldr	r3, [pc, #508]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d82:	4b7c      	ldr	r3, [pc, #496]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d92:	4b79      	ldr	r3, [pc, #484]	@ (8002f78 <HAL_RCC_OscConfig+0x4b0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d118      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9e:	4b76      	ldr	r3, [pc, #472]	@ (8002f78 <HAL_RCC_OscConfig+0x4b0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a75      	ldr	r2, [pc, #468]	@ (8002f78 <HAL_RCC_OscConfig+0x4b0>)
 8002da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fcdd 	bl	8001768 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db2:	f7fe fcd9 	bl	8001768 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e118      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8002f78 <HAL_RCC_OscConfig+0x4b0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCC_OscConfig+0x31e>
 8002dd8:	4b66      	ldr	r3, [pc, #408]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ddc:	4a65      	ldr	r2, [pc, #404]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de4:	e01c      	b.n	8002e20 <HAL_RCC_OscConfig+0x358>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x340>
 8002dee:	4b61      	ldr	r3, [pc, #388]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df2:	4a60      	ldr	r2, [pc, #384]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dfa:	4b5e      	ldr	r3, [pc, #376]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfe:	4a5d      	ldr	r2, [pc, #372]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0x358>
 8002e08:	4b5a      	ldr	r3, [pc, #360]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0c:	4a59      	ldr	r2, [pc, #356]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e14:	4b57      	ldr	r3, [pc, #348]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e18:	4a56      	ldr	r2, [pc, #344]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002e1a:	f023 0304 	bic.w	r3, r3, #4
 8002e1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d015      	beq.n	8002e54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7fe fc9e 	bl	8001768 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e30:	f7fe fc9a 	bl	8001768 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e0d7      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e46:	4b4b      	ldr	r3, [pc, #300]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0ee      	beq.n	8002e30 <HAL_RCC_OscConfig+0x368>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fe fc88 	bl	8001768 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5c:	f7fe fc84 	bl	8001768 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e0c1      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e72:	4b40      	ldr	r3, [pc, #256]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1ee      	bne.n	8002e5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d105      	bne.n	8002e90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e84:	4b3b      	ldr	r3, [pc, #236]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	4a3a      	ldr	r2, [pc, #232]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002e8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80ad 	beq.w	8002ff4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e9a:	4b36      	ldr	r3, [pc, #216]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d060      	beq.n	8002f68 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d145      	bne.n	8002f3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eae:	4b33      	ldr	r3, [pc, #204]	@ (8002f7c <HAL_RCC_OscConfig+0x4b4>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fc58 	bl	8001768 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fe fc54 	bl	8001768 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e093      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ece:	4b29      	ldr	r3, [pc, #164]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69da      	ldr	r2, [r3, #28]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	019b      	lsls	r3, r3, #6
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef0:	085b      	lsrs	r3, r3, #1
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	041b      	lsls	r3, r3, #16
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efc:	061b      	lsls	r3, r3, #24
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	071b      	lsls	r3, r3, #28
 8002f06:	491b      	ldr	r1, [pc, #108]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f7c <HAL_RCC_OscConfig+0x4b4>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f12:	f7fe fc29 	bl	8001768 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7fe fc25 	bl	8001768 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e064      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2c:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x452>
 8002f38:	e05c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b10      	ldr	r3, [pc, #64]	@ (8002f7c <HAL_RCC_OscConfig+0x4b4>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe fc12 	bl	8001768 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe fc0e 	bl	8001768 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e04d      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <HAL_RCC_OscConfig+0x4ac>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x480>
 8002f66:	e045      	b.n	8002ff4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e040      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f80:	4b1f      	ldr	r3, [pc, #124]	@ (8003000 <HAL_RCC_OscConfig+0x538>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d030      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d129      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d122      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d119      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d10f      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800

08003004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e042      	b.n	800309c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fe fa3a 	bl	80014a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2224      	movs	r2, #36	@ 0x24
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fdd3 	bl	8003bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800305c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800306c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800307c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	@ 0x28
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d175      	bne.n	80031b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_UART_Transmit+0x2c>
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e06e      	b.n	80031b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2221      	movs	r2, #33	@ 0x21
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e2:	f7fe fb41 	bl	8001768 <HAL_GetTick>
 80030e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	88fa      	ldrh	r2, [r7, #6]
 80030ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	88fa      	ldrh	r2, [r7, #6]
 80030f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030fc:	d108      	bne.n	8003110 <HAL_UART_Transmit+0x6c>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d104      	bne.n	8003110 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	e003      	b.n	8003118 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003118:	e02e      	b.n	8003178 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2200      	movs	r2, #0
 8003122:	2180      	movs	r1, #128	@ 0x80
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fb37 	bl	8003798 <UART_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e03a      	b.n	80031b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10b      	bne.n	800315a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003150:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	3302      	adds	r3, #2
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	e007      	b.n	800316a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	781a      	ldrb	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	3301      	adds	r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1cb      	bne.n	800311a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2200      	movs	r2, #0
 800318a:	2140      	movs	r1, #64	@ 0x40
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fb03 	bl	8003798 <UART_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e006      	b.n	80031b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	4613      	mov	r3, r2
 80031c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d112      	bne.n	80031fa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_UART_Receive_IT+0x26>
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e00b      	b.n	80031fc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	461a      	mov	r2, r3
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fb2a 	bl	800384a <UART_Start_Receive_IT>
 80031f6:	4603      	mov	r3, r0
 80031f8:	e000      	b.n	80031fc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b0ba      	sub	sp, #232	@ 0xe8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003230:	2300      	movs	r3, #0
 8003232:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <HAL_UART_IRQHandler+0x66>
 8003256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fc07 	bl	8003a76 <UART_Receive_IT>
      return;
 8003268:	e273      	b.n	8003752 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800326a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 80de 	beq.w	8003430 <HAL_UART_IRQHandler+0x22c>
 8003274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003284:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80d1 	beq.w	8003430 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_UART_IRQHandler+0xae>
 800329a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800329e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	f043 0201 	orr.w	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_UART_IRQHandler+0xd2>
 80032be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	f043 0202 	orr.w	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_UART_IRQHandler+0xf6>
 80032e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	f043 0204 	orr.w	r2, r3, #4
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d011      	beq.n	800332a <HAL_UART_IRQHandler+0x126>
 8003306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b00      	cmp	r3, #0
 8003310:	d105      	bne.n	800331e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003322:	f043 0208 	orr.w	r2, r3, #8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 820a 	beq.w	8003748 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_UART_IRQHandler+0x14e>
 8003340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fb92 	bl	8003a76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800335c:	2b40      	cmp	r3, #64	@ 0x40
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d103      	bne.n	800337e <HAL_UART_IRQHandler+0x17a>
 8003376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d04f      	beq.n	800341e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fa9d 	bl	80038be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338e:	2b40      	cmp	r3, #64	@ 0x40
 8003390:	d141      	bne.n	8003416 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3314      	adds	r3, #20
 8003398:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1d9      	bne.n	8003392 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d013      	beq.n	800340e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ea:	4a8a      	ldr	r2, [pc, #552]	@ (8003614 <HAL_UART_IRQHandler+0x410>)
 80033ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fb69 	bl	8001aca <HAL_DMA_Abort_IT>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d016      	beq.n	800342c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003408:	4610      	mov	r0, r2
 800340a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340c:	e00e      	b.n	800342c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f9ac 	bl	800376c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003414:	e00a      	b.n	800342c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f9a8 	bl	800376c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341c:	e006      	b.n	800342c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f9a4 	bl	800376c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800342a:	e18d      	b.n	8003748 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342c:	bf00      	nop
    return;
 800342e:	e18b      	b.n	8003748 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003434:	2b01      	cmp	r3, #1
 8003436:	f040 8167 	bne.w	8003708 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8160 	beq.w	8003708 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8159 	beq.w	8003708 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003476:	2b40      	cmp	r3, #64	@ 0x40
 8003478:	f040 80ce 	bne.w	8003618 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003488:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80a9 	beq.w	80035e4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800349a:	429a      	cmp	r2, r3
 800349c:	f080 80a2 	bcs.w	80035e4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034b2:	f000 8088 	beq.w	80035c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	330c      	adds	r3, #12
 80034bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034f2:	e841 2300 	strex	r3, r2, [r1]
 80034f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1d9      	bne.n	80034b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3314      	adds	r3, #20
 8003508:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003512:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3314      	adds	r3, #20
 8003522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003526:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800352a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800352e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003538:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e1      	bne.n	8003502 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3314      	adds	r3, #20
 8003544:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003546:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003548:	e853 3f00 	ldrex	r3, [r3]
 800354c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800354e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003554:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3314      	adds	r3, #20
 800355e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003562:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003564:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003568:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e3      	bne.n	800353e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	330c      	adds	r3, #12
 800358a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800358e:	e853 3f00 	ldrex	r3, [r3]
 8003592:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003596:	f023 0310 	bic.w	r3, r3, #16
 800359a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	330c      	adds	r3, #12
 80035a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80035a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035b0:	e841 2300 	strex	r3, r2, [r1]
 80035b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e3      	bne.n	8003584 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe fa12 	bl	80019ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	b29b      	uxth	r3, r3
 80035da:	4619      	mov	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f8cf 	bl	8003780 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80035e2:	e0b3      	b.n	800374c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035ec:	429a      	cmp	r2, r3
 80035ee:	f040 80ad 	bne.w	800374c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035fc:	f040 80a6 	bne.w	800374c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800360a:	4619      	mov	r1, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f8b7 	bl	8003780 <HAL_UARTEx_RxEventCallback>
      return;
 8003612:	e09b      	b.n	800374c <HAL_UART_IRQHandler+0x548>
 8003614:	08003985 	.word	0x08003985
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003620:	b29b      	uxth	r3, r3
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 808e 	beq.w	8003750 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 8089 	beq.w	8003750 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800364e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003650:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003654:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003662:	647a      	str	r2, [r7, #68]	@ 0x44
 8003664:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003668:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e3      	bne.n	800363e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3314      	adds	r3, #20
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	623b      	str	r3, [r7, #32]
   return(result);
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3314      	adds	r3, #20
 8003696:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800369a:	633a      	str	r2, [r7, #48]	@ 0x30
 800369c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e3      	bne.n	8003676 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0310 	bic.w	r3, r3, #16
 80036d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	330c      	adds	r3, #12
 80036dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80036e0:	61fa      	str	r2, [r7, #28]
 80036e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e4:	69b9      	ldr	r1, [r7, #24]
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	e841 2300 	strex	r3, r2, [r1]
 80036ec:	617b      	str	r3, [r7, #20]
   return(result);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e3      	bne.n	80036bc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036fe:	4619      	mov	r1, r3
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f83d 	bl	8003780 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003706:	e023      	b.n	8003750 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800370c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <HAL_UART_IRQHandler+0x524>
 8003714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f940 	bl	80039a6 <UART_Transmit_IT>
    return;
 8003726:	e014      	b.n	8003752 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00e      	beq.n	8003752 <HAL_UART_IRQHandler+0x54e>
 8003734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f980 	bl	8003a46 <UART_EndTransmit_IT>
    return;
 8003746:	e004      	b.n	8003752 <HAL_UART_IRQHandler+0x54e>
    return;
 8003748:	bf00      	nop
 800374a:	e002      	b.n	8003752 <HAL_UART_IRQHandler+0x54e>
      return;
 800374c:	bf00      	nop
 800374e:	e000      	b.n	8003752 <HAL_UART_IRQHandler+0x54e>
      return;
 8003750:	bf00      	nop
  }
}
 8003752:	37e8      	adds	r7, #232	@ 0xe8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a8:	e03b      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d037      	beq.n	8003822 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b2:	f7fd ffd9 	bl	8001768 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d302      	bcc.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e03a      	b.n	8003842 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d023      	beq.n	8003822 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b80      	cmp	r3, #128	@ 0x80
 80037de:	d020      	beq.n	8003822 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b40      	cmp	r3, #64	@ 0x40
 80037e4:	d01d      	beq.n	8003822 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d116      	bne.n	8003822 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f857 	bl	80038be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2208      	movs	r2, #8
 8003814:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e00f      	b.n	8003842 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4013      	ands	r3, r2
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	429a      	cmp	r2, r3
 8003830:	bf0c      	ite	eq
 8003832:	2301      	moveq	r3, #1
 8003834:	2300      	movne	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	429a      	cmp	r2, r3
 800383e:	d0b4      	beq.n	80037aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	4613      	mov	r3, r2
 8003856:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	88fa      	ldrh	r2, [r7, #6]
 8003868:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2222      	movs	r2, #34	@ 0x22
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800388e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0220 	orr.w	r2, r2, #32
 80038ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038be:	b480      	push	{r7}
 80038c0:	b095      	sub	sp, #84	@ 0x54
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d0:	e853 3f00 	ldrex	r3, [r3]
 80038d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	330c      	adds	r3, #12
 80038e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80038e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e5      	bne.n	80038c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3314      	adds	r3, #20
 8003900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	61fb      	str	r3, [r7, #28]
   return(result);
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3314      	adds	r3, #20
 8003918:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800391a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800391c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003922:	e841 2300 	strex	r3, r2, [r1]
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1e5      	bne.n	80038fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	2b01      	cmp	r3, #1
 8003934:	d119      	bne.n	800396a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	60bb      	str	r3, [r7, #8]
   return(result);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f023 0310 	bic.w	r3, r3, #16
 800394c:	647b      	str	r3, [r7, #68]	@ 0x44
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003956:	61ba      	str	r2, [r7, #24]
 8003958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	6979      	ldr	r1, [r7, #20]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	613b      	str	r3, [r7, #16]
   return(result);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e5      	bne.n	8003936 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003978:	bf00      	nop
 800397a:	3754      	adds	r7, #84	@ 0x54
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7ff fee7 	bl	800376c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b21      	cmp	r3, #33	@ 0x21
 80039b8:	d13e      	bne.n	8003a38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c2:	d114      	bne.n	80039ee <UART_Transmit_IT+0x48>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d110      	bne.n	80039ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	1c9a      	adds	r2, r3, #2
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	621a      	str	r2, [r3, #32]
 80039ec:	e008      	b.n	8003a00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	1c59      	adds	r1, r3, #1
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6211      	str	r1, [r2, #32]
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10f      	bne.n	8003a34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fe76 	bl	8003758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b08c      	sub	sp, #48	@ 0x30
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b22      	cmp	r3, #34	@ 0x22
 8003a90:	f040 80aa 	bne.w	8003be8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a9c:	d115      	bne.n	8003aca <UART_Receive_IT+0x54>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d111      	bne.n	8003aca <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac2:	1c9a      	adds	r2, r3, #2
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ac8:	e024      	b.n	8003b14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad8:	d007      	beq.n	8003aea <UART_Receive_IT+0x74>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <UART_Receive_IT+0x82>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	e008      	b.n	8003b0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	4619      	mov	r1, r3
 8003b22:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d15d      	bne.n	8003be4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0220 	bic.w	r2, r2, #32
 8003b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d135      	bne.n	8003bda <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	613b      	str	r3, [r7, #16]
   return(result);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f023 0310 	bic.w	r3, r3, #16
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	330c      	adds	r3, #12
 8003b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b94:	623a      	str	r2, [r7, #32]
 8003b96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	69f9      	ldr	r1, [r7, #28]
 8003b9a:	6a3a      	ldr	r2, [r7, #32]
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d10a      	bne.n	8003bcc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff fdd4 	bl	8003780 <HAL_UARTEx_RxEventCallback>
 8003bd8:	e002      	b.n	8003be0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fd fc14 	bl	8001408 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e002      	b.n	8003bea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e000      	b.n	8003bea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3730      	adds	r7, #48	@ 0x30
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf8:	b0c0      	sub	sp, #256	@ 0x100
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c10:	68d9      	ldr	r1, [r3, #12]
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	ea40 0301 	orr.w	r3, r0, r1
 8003c1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c4c:	f021 010c 	bic.w	r1, r1, #12
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6e:	6999      	ldr	r1, [r3, #24]
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	ea40 0301 	orr.w	r3, r0, r1
 8003c7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4b8f      	ldr	r3, [pc, #572]	@ (8003ec0 <UART_SetConfig+0x2cc>)
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d005      	beq.n	8003c94 <UART_SetConfig+0xa0>
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b8d      	ldr	r3, [pc, #564]	@ (8003ec4 <UART_SetConfig+0x2d0>)
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d104      	bne.n	8003c9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c94:	f7fe fcd4 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8003c98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c9c:	e003      	b.n	8003ca6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c9e:	f7fe fcbb 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8003ca2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb0:	f040 810c 	bne.w	8003ecc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	462b      	mov	r3, r5
 8003cca:	1891      	adds	r1, r2, r2
 8003ccc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003cce:	415b      	adcs	r3, r3
 8003cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	eb12 0801 	adds.w	r8, r2, r1
 8003cdc:	4629      	mov	r1, r5
 8003cde:	eb43 0901 	adc.w	r9, r3, r1
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cf6:	4690      	mov	r8, r2
 8003cf8:	4699      	mov	r9, r3
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	eb18 0303 	adds.w	r3, r8, r3
 8003d00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d04:	462b      	mov	r3, r5
 8003d06:	eb49 0303 	adc.w	r3, r9, r3
 8003d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d22:	460b      	mov	r3, r1
 8003d24:	18db      	adds	r3, r3, r3
 8003d26:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d28:	4613      	mov	r3, r2
 8003d2a:	eb42 0303 	adc.w	r3, r2, r3
 8003d2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d38:	f7fc fa64 	bl	8000204 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4b61      	ldr	r3, [pc, #388]	@ (8003ec8 <UART_SetConfig+0x2d4>)
 8003d42:	fba3 2302 	umull	r2, r3, r3, r2
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	011c      	lsls	r4, r3, #4
 8003d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	1891      	adds	r1, r2, r2
 8003d62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d64:	415b      	adcs	r3, r3
 8003d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	eb12 0a01 	adds.w	sl, r2, r1
 8003d72:	4649      	mov	r1, r9
 8003d74:	eb43 0b01 	adc.w	fp, r3, r1
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d8c:	4692      	mov	sl, r2
 8003d8e:	469b      	mov	fp, r3
 8003d90:	4643      	mov	r3, r8
 8003d92:	eb1a 0303 	adds.w	r3, sl, r3
 8003d96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	eb4b 0303 	adc.w	r3, fp, r3
 8003da0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003db0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003db4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003db8:	460b      	mov	r3, r1
 8003dba:	18db      	adds	r3, r3, r3
 8003dbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	eb42 0303 	adc.w	r3, r2, r3
 8003dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003dca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003dce:	f7fc fa19 	bl	8000204 <__aeabi_uldivmod>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec8 <UART_SetConfig+0x2d4>)
 8003dda:	fba3 2301 	umull	r2, r3, r3, r1
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	2264      	movs	r2, #100	@ 0x64
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	1acb      	subs	r3, r1, r3
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003dee:	4b36      	ldr	r3, [pc, #216]	@ (8003ec8 <UART_SetConfig+0x2d4>)
 8003df0:	fba3 2302 	umull	r2, r3, r3, r2
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003dfc:	441c      	add	r4, r3
 8003dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e10:	4642      	mov	r2, r8
 8003e12:	464b      	mov	r3, r9
 8003e14:	1891      	adds	r1, r2, r2
 8003e16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e18:	415b      	adcs	r3, r3
 8003e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e20:	4641      	mov	r1, r8
 8003e22:	1851      	adds	r1, r2, r1
 8003e24:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e26:	4649      	mov	r1, r9
 8003e28:	414b      	adcs	r3, r1
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e38:	4659      	mov	r1, fp
 8003e3a:	00cb      	lsls	r3, r1, #3
 8003e3c:	4651      	mov	r1, sl
 8003e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e42:	4651      	mov	r1, sl
 8003e44:	00ca      	lsls	r2, r1, #3
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	189b      	adds	r3, r3, r2
 8003e50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e54:	464b      	mov	r3, r9
 8003e56:	460a      	mov	r2, r1
 8003e58:	eb42 0303 	adc.w	r3, r2, r3
 8003e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e74:	460b      	mov	r3, r1
 8003e76:	18db      	adds	r3, r3, r3
 8003e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	eb42 0303 	adc.w	r3, r2, r3
 8003e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e8a:	f7fc f9bb 	bl	8000204 <__aeabi_uldivmod>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <UART_SetConfig+0x2d4>)
 8003e94:	fba3 1302 	umull	r1, r3, r3, r2
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	2164      	movs	r1, #100	@ 0x64
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	3332      	adds	r3, #50	@ 0x32
 8003ea6:	4a08      	ldr	r2, [pc, #32]	@ (8003ec8 <UART_SetConfig+0x2d4>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	f003 0207 	and.w	r2, r3, #7
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4422      	add	r2, r4
 8003eba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ebc:	e106      	b.n	80040cc <UART_SetConfig+0x4d8>
 8003ebe:	bf00      	nop
 8003ec0:	40011000 	.word	0x40011000
 8003ec4:	40011400 	.word	0x40011400
 8003ec8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ed6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003eda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ede:	4642      	mov	r2, r8
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	1891      	adds	r1, r2, r2
 8003ee4:	6239      	str	r1, [r7, #32]
 8003ee6:	415b      	adcs	r3, r3
 8003ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eee:	4641      	mov	r1, r8
 8003ef0:	1854      	adds	r4, r2, r1
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	eb43 0501 	adc.w	r5, r3, r1
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	00eb      	lsls	r3, r5, #3
 8003f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f06:	00e2      	lsls	r2, r4, #3
 8003f08:	4614      	mov	r4, r2
 8003f0a:	461d      	mov	r5, r3
 8003f0c:	4643      	mov	r3, r8
 8003f0e:	18e3      	adds	r3, r4, r3
 8003f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f14:	464b      	mov	r3, r9
 8003f16:	eb45 0303 	adc.w	r3, r5, r3
 8003f1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	008b      	lsls	r3, r1, #2
 8003f3e:	4621      	mov	r1, r4
 8003f40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f44:	4621      	mov	r1, r4
 8003f46:	008a      	lsls	r2, r1, #2
 8003f48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f4c:	f7fc f95a 	bl	8000204 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4b60      	ldr	r3, [pc, #384]	@ (80040d8 <UART_SetConfig+0x4e4>)
 8003f56:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	011c      	lsls	r4, r3, #4
 8003f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f70:	4642      	mov	r2, r8
 8003f72:	464b      	mov	r3, r9
 8003f74:	1891      	adds	r1, r2, r2
 8003f76:	61b9      	str	r1, [r7, #24]
 8003f78:	415b      	adcs	r3, r3
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f80:	4641      	mov	r1, r8
 8003f82:	1851      	adds	r1, r2, r1
 8003f84:	6139      	str	r1, [r7, #16]
 8003f86:	4649      	mov	r1, r9
 8003f88:	414b      	adcs	r3, r1
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f98:	4659      	mov	r1, fp
 8003f9a:	00cb      	lsls	r3, r1, #3
 8003f9c:	4651      	mov	r1, sl
 8003f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fa2:	4651      	mov	r1, sl
 8003fa4:	00ca      	lsls	r2, r1, #3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	4642      	mov	r2, r8
 8003fae:	189b      	adds	r3, r3, r2
 8003fb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fb4:	464b      	mov	r3, r9
 8003fb6:	460a      	mov	r2, r1
 8003fb8:	eb42 0303 	adc.w	r3, r2, r3
 8003fbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003fd8:	4649      	mov	r1, r9
 8003fda:	008b      	lsls	r3, r1, #2
 8003fdc:	4641      	mov	r1, r8
 8003fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe2:	4641      	mov	r1, r8
 8003fe4:	008a      	lsls	r2, r1, #2
 8003fe6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003fea:	f7fc f90b 	bl	8000204 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	4b38      	ldr	r3, [pc, #224]	@ (80040d8 <UART_SetConfig+0x4e4>)
 8003ff6:	fba3 2301 	umull	r2, r3, r3, r1
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	2264      	movs	r2, #100	@ 0x64
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	1acb      	subs	r3, r1, r3
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	3332      	adds	r3, #50	@ 0x32
 8004008:	4a33      	ldr	r2, [pc, #204]	@ (80040d8 <UART_SetConfig+0x4e4>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004014:	441c      	add	r4, r3
 8004016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800401a:	2200      	movs	r2, #0
 800401c:	673b      	str	r3, [r7, #112]	@ 0x70
 800401e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004020:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004024:	4642      	mov	r2, r8
 8004026:	464b      	mov	r3, r9
 8004028:	1891      	adds	r1, r2, r2
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	415b      	adcs	r3, r3
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004034:	4641      	mov	r1, r8
 8004036:	1851      	adds	r1, r2, r1
 8004038:	6039      	str	r1, [r7, #0]
 800403a:	4649      	mov	r1, r9
 800403c:	414b      	adcs	r3, r1
 800403e:	607b      	str	r3, [r7, #4]
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800404c:	4659      	mov	r1, fp
 800404e:	00cb      	lsls	r3, r1, #3
 8004050:	4651      	mov	r1, sl
 8004052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004056:	4651      	mov	r1, sl
 8004058:	00ca      	lsls	r2, r1, #3
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	4603      	mov	r3, r0
 8004060:	4642      	mov	r2, r8
 8004062:	189b      	adds	r3, r3, r2
 8004064:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004066:	464b      	mov	r3, r9
 8004068:	460a      	mov	r2, r1
 800406a:	eb42 0303 	adc.w	r3, r2, r3
 800406e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	663b      	str	r3, [r7, #96]	@ 0x60
 800407a:	667a      	str	r2, [r7, #100]	@ 0x64
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004088:	4649      	mov	r1, r9
 800408a:	008b      	lsls	r3, r1, #2
 800408c:	4641      	mov	r1, r8
 800408e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004092:	4641      	mov	r1, r8
 8004094:	008a      	lsls	r2, r1, #2
 8004096:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800409a:	f7fc f8b3 	bl	8000204 <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <UART_SetConfig+0x4e4>)
 80040a4:	fba3 1302 	umull	r1, r3, r3, r2
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	2164      	movs	r1, #100	@ 0x64
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	3332      	adds	r3, #50	@ 0x32
 80040b6:	4a08      	ldr	r2, [pc, #32]	@ (80040d8 <UART_SetConfig+0x4e4>)
 80040b8:	fba2 2303 	umull	r2, r3, r2, r3
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	f003 020f 	and.w	r2, r3, #15
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4422      	add	r2, r4
 80040ca:	609a      	str	r2, [r3, #8]
}
 80040cc:	bf00      	nop
 80040ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80040d2:	46bd      	mov	sp, r7
 80040d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040d8:	51eb851f 	.word	0x51eb851f

080040dc <memset>:
 80040dc:	4402      	add	r2, r0
 80040de:	4603      	mov	r3, r0
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d100      	bne.n	80040e6 <memset+0xa>
 80040e4:	4770      	bx	lr
 80040e6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ea:	e7f9      	b.n	80040e0 <memset+0x4>

080040ec <__libc_init_array>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004124 <__libc_init_array+0x38>)
 80040f0:	4c0d      	ldr	r4, [pc, #52]	@ (8004128 <__libc_init_array+0x3c>)
 80040f2:	1b64      	subs	r4, r4, r5
 80040f4:	10a4      	asrs	r4, r4, #2
 80040f6:	2600      	movs	r6, #0
 80040f8:	42a6      	cmp	r6, r4
 80040fa:	d109      	bne.n	8004110 <__libc_init_array+0x24>
 80040fc:	4d0b      	ldr	r5, [pc, #44]	@ (800412c <__libc_init_array+0x40>)
 80040fe:	4c0c      	ldr	r4, [pc, #48]	@ (8004130 <__libc_init_array+0x44>)
 8004100:	f000 f818 	bl	8004134 <_init>
 8004104:	1b64      	subs	r4, r4, r5
 8004106:	10a4      	asrs	r4, r4, #2
 8004108:	2600      	movs	r6, #0
 800410a:	42a6      	cmp	r6, r4
 800410c:	d105      	bne.n	800411a <__libc_init_array+0x2e>
 800410e:	bd70      	pop	{r4, r5, r6, pc}
 8004110:	f855 3b04 	ldr.w	r3, [r5], #4
 8004114:	4798      	blx	r3
 8004116:	3601      	adds	r6, #1
 8004118:	e7ee      	b.n	80040f8 <__libc_init_array+0xc>
 800411a:	f855 3b04 	ldr.w	r3, [r5], #4
 800411e:	4798      	blx	r3
 8004120:	3601      	adds	r6, #1
 8004122:	e7f2      	b.n	800410a <__libc_init_array+0x1e>
 8004124:	0800421c 	.word	0x0800421c
 8004128:	0800421c 	.word	0x0800421c
 800412c:	0800421c 	.word	0x0800421c
 8004130:	08004220 	.word	0x08004220

08004134 <_init>:
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	bf00      	nop
 8004138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413a:	bc08      	pop	{r3}
 800413c:	469e      	mov	lr, r3
 800413e:	4770      	bx	lr

08004140 <_fini>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	bf00      	nop
 8004144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004146:	bc08      	pop	{r3}
 8004148:	469e      	mov	lr, r3
 800414a:	4770      	bx	lr
